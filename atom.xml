<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>程序员小鲁</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-07-26T06:26:07.020Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>鲁超群</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>nodeJS服务器使用</title>
    <link href="http://yoursite.com/2016/07/15/hello-world/"/>
    <id>http://yoursite.com/2016/07/15/hello-world/</id>
    <published>2016-07-15T03:13:03.000Z</published>
    <updated>2016-07-26T06:26:07.020Z</updated>
    
    <content type="html">&lt;hr&gt;
&lt;h2 id=&quot;nodeJS概括&quot;&gt;&lt;a href=&quot;#nodeJS概括&quot; class=&quot;headerlink&quot; title=&quot;nodeJS概括&quot;&gt;&lt;/a&gt;nodeJS概括&lt;/h2&gt;</content>
    
    <summary type="html">
    
      这是一篇关于node编写服务器文章，用于处理前端的请求数据。
    
    </summary>
    
      <category term="nodeJS" scheme="http://yoursite.com/categories/nodeJS/"/>
    
    
      <category term="node" scheme="http://yoursite.com/tags/node/"/>
    
      <category term="服务器" scheme="http://yoursite.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>angularJS进阶阶段(4)</title>
    <link href="http://yoursite.com/2016/06/08/angular-4%E8%BF%9B%E9%98%B6%E9%98%B6%E6%AE%B5/"/>
    <id>http://yoursite.com/2016/06/08/angular-4进阶阶段/</id>
    <published>2016-06-08T02:45:25.000Z</published>
    <updated>2016-07-25T14:59:26.066Z</updated>
    
    <content type="html">&lt;hr&gt;
&lt;h2 id=&quot;angularJS进阶阶段-4&quot;&gt;&lt;a href=&quot;#angularJS进阶阶段-4&quot; class=&quot;headerlink&quot; title=&quot;angularJS进阶阶段(4)&quot;&gt;&lt;/a&gt;angularJS进阶阶段(4)&lt;/h2&gt;&lt;h3 id=&quot;编译器-compile&quot;&gt;&lt;a href=&quot;#编译器-compile&quot; class=&quot;headerlink&quot; title=&quot;编译器/$compile&quot;&gt;&lt;/a&gt;编译器/$compile&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;编译器$compile是一个AngularJS的内置服务，它负责遍历DOM树来查找匹配指令， 并调用指令的实现代码进行处理。&lt;br&gt;  HTML编译包括3个步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;匹配指令&lt;br&gt;$compile遍历DOM树，如果发现有元素匹配了某个指令，那么这个指令将被加入 该DOM元素的指令列表中。一个DOM元素可能匹配多个指令。&lt;/li&gt;
&lt;li&gt;执行指令的编译函数&lt;br&gt;当一个DOM元素的所有指令都找齐后，编译器根据指令的优先级/priority指令进行排序。 每个指令的compile函数被依次执行。每个compile执行的结果产生一个link函数，这些 link函数合并成一个复合link函数。&lt;/li&gt;
&lt;li&gt;执行生成的链接函数&lt;br&gt;$compile通过执行指令的link函数，将模板和scope链接起来。结果就是一个DOM视图和scope对象模型 之间的动态数据绑定。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;为何将编译和连接两个步骤分开?&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;简单说，当数据模型的变化会导致DOM结构变化时，指令就需要分别定义compile()函数和link函数。 例如，ng-repeat指令需要为数据集合中的每个成员复制DOM元素。将编译和链接过程分开可以有效 地提高性能，因为DOM的复制放在compile()里，仅需要执行一次，但链接则发生在每个生成的DOM元素 上，所以指令的link()函数会执行多次。&lt;/p&gt;
&lt;p&gt;指令很少需要compile函数，因为大多数指令考虑的是作用于特定的DOM元素实例，而不是改变DOM 的结构。所以link函数更常用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;指令-directive&quot;&gt;&lt;a href=&quot;#指令-directive&quot; class=&quot;headerlink&quot; title=&quot;指令/directive&quot;&gt;&lt;/a&gt;指令/directive&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;笼统地说，指令是DOM元素（例如属性、元素、CSS类等）上的标记符，用来告诉AngularJS的HTML编译器 （$compile服务）将特定的行为绑定到DOM元素，或者改变DOM元素。&lt;/p&gt;
&lt;p&gt;指令可以放置在元素名、属性、CSS类名称及备注中。下面是一些等效的触发”ng-bind”指令的写法：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;span ng-bind=&lt;span class=&quot;string&quot;&gt;&quot;exp&quot;&lt;/span&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;span class=&lt;span class=&quot;string&quot;&gt;&quot;ng-bind: exp;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;ng-bind&amp;gt;&amp;lt;/ng-bind&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;!-- directive: ng-bind exp --&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;/img/angular-4进阶1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;指令的规范化&quot;&gt;&lt;a href=&quot;#指令的规范化&quot; class=&quot;headerlink&quot; title=&quot;指令的规范化&quot;&gt;&lt;/a&gt;指令的规范化&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;AngularJS在进行匹配检测之前，首先对HTML元素的标签和属性名转化成规范的驼峰式字符串：&lt;br&gt;  1.去除名称前缀的x-和data-&lt;br&gt;  2.以: , - 或 _ 为分割符，将字符串切分成单词，除第一个单词外，其余单词首字母大写&lt;br&gt;  3.重新拼接各单词&lt;br&gt;  例如，下面的写法都等效地匹配ngBind指令：&lt;br&gt;  &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;span ng-bind=&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;br/&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;span ng:&lt;span class=&quot;built_in&quot;&gt;bind&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;br/&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;span ng_&lt;span class=&quot;built_in&quot;&gt;bind&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;br/&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;span data-ng-bind=&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;br/&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;span x-ng-bind=&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;br/&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  所以，在前面的课程中，我们在HTML中使用的ez-duang指令，将被规范为ezDuang， 编译器使用这个规范化的名称与注册的指令进行匹配。&lt;/p&gt;
&lt;h3 id=&quot;控制器&quot;&gt;&lt;a href=&quot;#控制器&quot; class=&quot;headerlink&quot; title=&quot;控制器&quot;&gt;&lt;/a&gt;控制器&lt;/h3&gt;&lt;h4 id=&quot;控制器的作用&quot;&gt;&lt;a href=&quot;#控制器的作用&quot; class=&quot;headerlink&quot; title=&quot;控制器的作用&quot;&gt;&lt;/a&gt;控制器的作用&lt;/h4&gt;&lt;p&gt;简单地说，没有控制器/controller，我们没有地方定义业务模型。&lt;br&gt;&lt;code&gt;&amp;lt;div ng-init=&amp;quot;sb={name:&amp;#39;somebody&amp;#39;,gender:&amp;#39;male&amp;#39;,age:28}&amp;quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;控制器让我们有机会在scope上定义我们的业务逻辑，具体说，可以使用控制器：&lt;br&gt;  1.对scope对象进行初始化&lt;br&gt;  2.向scope对象添加方法&lt;/p&gt;
&lt;h4 id=&quot;在模板中声明控制器&quot;&gt;&lt;a href=&quot;#在模板中声明控制器&quot; class=&quot;headerlink&quot; title=&quot;在模板中声明控制器&quot;&gt;&lt;/a&gt;在模板中声明控制器&lt;/h4&gt;&lt;p&gt;在一个HTML元素上使用ng-controller指令，就可以引入一个控制器对象：&lt;br&gt;&lt;code&gt;&amp;lt;div ng-controller=&amp;quot;myController&amp;quot;&amp;gt;...&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;控制器的实现&quot;&gt;&lt;a href=&quot;#控制器的实现&quot; class=&quot;headerlink&quot; title=&quot;控制器的实现&quot;&gt;&lt;/a&gt;控制器的实现&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;//控制器类定义&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var myControllerClass = &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;variable&quot;&gt;$scope&lt;/span&gt;)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    //模型属性定义&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;variable&quot;&gt;$scope&lt;/span&gt;.text = &lt;span class=&quot;string&quot;&gt;&quot;...&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    //模型方法定义&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;variable&quot;&gt;$scope&lt;/span&gt;.do = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;/span&gt;()&amp;#123;...&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//在模块中注册控制器&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;angular.module(&lt;span class=&quot;string&quot;&gt;&#39;someModule&#39;&lt;/span&gt;,[])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;controller(&lt;span class=&quot;string&quot;&gt;&quot;myController&quot;&lt;/span&gt;,myControllerClass);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;控制器的一次性&quot;&gt;&lt;a href=&quot;#控制器的一次性&quot; class=&quot;headerlink&quot; title=&quot;控制器的一次性&quot;&gt;&lt;/a&gt;控制器的一次性&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;控制器构造函数仅在AngularJS对HTML文档进行编译时被执行一次。从这个角度看， 就更容易理解为何将控制器称为对scope对象的增强：一旦控制器创建完毕，就意味着scope对 象上的业务模型构造完毕，此后就不再需要控制器了- scope对象接管了一切。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;控制器对scope的影响&quot;&gt;&lt;a href=&quot;#控制器对scope的影响&quot; class=&quot;headerlink&quot; title=&quot;控制器对scope的影响&quot;&gt;&lt;/a&gt;控制器对scope的影响&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;ng-controller指令总是创建一个新的scope对象：&lt;br&gt;&lt;img src=&quot;/img/angular-4进阶2.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;在图中，我们看到：&lt;br&gt;  1.ng-app指令引发$rootScope对象的创建。开始时，它是一个空对象。&lt;br&gt;  2.body元素对应的scope对象还是$rootScope。ng-init指令将sb对象挂在了$rootScope上。&lt;br&gt;  3.div元素通过ng-controller指令创建了一个新的scope对象，这个对象的原型是$rootScope。&lt;br&gt;  4.因为原型继承的关系，在do函数中对sb的引用指向$rootScope.sb。&lt;/p&gt;
&lt;h3 id=&quot;scope对象&quot;&gt;&lt;a href=&quot;#scope对象&quot; class=&quot;headerlink&quot; title=&quot;$scope对象&quot;&gt;&lt;/a&gt;$scope对象&lt;/h3&gt;&lt;h4 id=&quot;初始化-scope对象&quot;&gt;&lt;a href=&quot;#初始化-scope对象&quot; class=&quot;headerlink&quot; title=&quot;初始化$scope对象&quot;&gt;&lt;/a&gt;初始化$scope对象&lt;/h4&gt;&lt;p&gt;通常在应用启动时，需要初始化scope对象上的数据模型。我们之前曾使用ng-init指令进行初始化， 而使用控制器则是更为规范的做法。&lt;br&gt;&lt;img src=&quot;/img/angular-4进阶3.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;请注意，控制器仅仅负责在编译时在scope对象上建立视图对象vm，视图对象和模板的绑定则是由 scope负责管理的。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;html ng-app=&lt;span class=&quot;string&quot;&gt;&quot;ezstuff&quot;&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;head&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;script src=&lt;span class=&quot;string&quot;&gt;&quot;http://lib.sinaapp.com/js/angular.js/angular-1.2.19/angular.min.js&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/head&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;body&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;div ng-controller=&lt;span class=&quot;string&quot;&gt;&quot;ezController&quot;&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;lt;div&amp;gt;name : &amp;#123;&amp;#123;vm.sb.name&amp;#125;&amp;#125;&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;lt;div&amp;gt;gender : &amp;#123;&amp;#123;vm.sb.gender&amp;#125;&amp;#125;&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;lt;div&amp;gt;age : &amp;#123;&amp;#123;vm.sb.age&amp;#125;&amp;#125;&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;lt;div&amp;gt;career : &amp;#123;&amp;#123;vm.sb.career&amp;#125;&amp;#125;&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;lt;div&amp;gt;&amp;lt;img ng-src=&lt;span class=&quot;string&quot;&gt;&quot;&amp;#123;&amp;#123;vm.sb.photo&amp;#125;&amp;#125;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/body&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/html&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var ezControllerClass = &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;variable&quot;&gt;$scope&lt;/span&gt;)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	//view model&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;variable&quot;&gt;$scope&lt;/span&gt;.vm = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		sb : &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			name : &lt;span class=&quot;string&quot;&gt;&quot;Jason Stantham&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			gender : &lt;span class=&quot;string&quot;&gt;&quot;male&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			age : 48,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			career : &lt;span class=&quot;string&quot;&gt;&quot;actor&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			photo : &lt;span class=&quot;string&quot;&gt;&quot;http://b.hiphotos.baidu.com/baike/w%3D268/sign=a03742145bee3d6d22c680cd7b176d41/359b033b5bb5c9eae4c45250d739b6003af3b34a.jpg&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;angular.module(&lt;span class=&quot;string&quot;&gt;&quot;ezstuff&quot;&lt;/span&gt;,[])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;.controller(&lt;span class=&quot;string&quot;&gt;&quot;ezController&quot;&lt;/span&gt;,ezControllerClass);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;向scope对象添加方法&quot;&gt;&lt;a href=&quot;#向scope对象添加方法&quot; class=&quot;headerlink&quot; title=&quot;向scope对象添加方法&quot;&gt;&lt;/a&gt;向scope对象添加方法&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;业务模型是动态的，在数据之外，我们需要给业务模型添加动作。在之前建立的业务模型上，我们增加一个随机挑选的方法：shuffle，这个方法负责 从一个小型的名人库中随机的选择一个名人来更新模型的sb属性：&lt;br&gt;&lt;img src=&quot;/img/angular-4进阶4.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;通过在button上使用ng-click指令，我们将模型的shuffle方法绑定到了鼠标点击 事件上。试着用鼠标点击【shuffle】按钮，我们的模型将从库里随机的选出一个 名人，显示在视图里。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;html ng-app=&lt;span class=&quot;string&quot;&gt;&quot;ezstuff&quot;&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;head&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;script src=&lt;span class=&quot;string&quot;&gt;&quot;http://lib.sinaapp.com/js/angular.js/angular-1.2.19/angular.min.js&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/head&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;body&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;div ng-controller=&lt;span class=&quot;string&quot;&gt;&quot;ezController&quot;&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;lt;button ng-click=&lt;span class=&quot;string&quot;&gt;&quot;vm.shuffle();&quot;&lt;/span&gt;&amp;gt;shuffle&amp;lt;/button&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;lt;div&amp;gt;name : &amp;#123;&amp;#123;vm.sb.name&amp;#125;&amp;#125;&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;lt;div&amp;gt;gender : &amp;#123;&amp;#123;vm.sb.gender&amp;#125;&amp;#125;&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;lt;div&amp;gt;age : &amp;#123;&amp;#123;vm.sb.age&amp;#125;&amp;#125;&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;lt;div&amp;gt;career : &amp;#123;&amp;#123;vm.sb.career&amp;#125;&amp;#125;&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;lt;div&amp;gt;&amp;lt;img ng-src=&lt;span class=&quot;string&quot;&gt;&quot;&amp;#123;&amp;#123;vm.sb.photo&amp;#125;&amp;#125;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/body&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/html&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var ezControllerClass = &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;variable&quot;&gt;$scope&lt;/span&gt;)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	//view model&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;variable&quot;&gt;$scope&lt;/span&gt;.vm = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		sb : &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			name : &lt;span class=&quot;string&quot;&gt;&quot;Jason Stantham&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			gender : &lt;span class=&quot;string&quot;&gt;&quot;male&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			age : 48,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			career : &lt;span class=&quot;string&quot;&gt;&quot;actor&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			photo : &lt;span class=&quot;string&quot;&gt;&quot;http://b.hiphotos.baidu.com/baike/w%3D268/sign=a03742145bee3d6d22c680cd7b176d41/359b033b5bb5c9eae4c45250d739b6003af3b34a.jpg&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		shuffle : &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;/span&gt;()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				var repo = [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;					&amp;#123;name:&lt;span class=&quot;string&quot;&gt;&quot;Jason Stantham&quot;&lt;/span&gt;,gender:&lt;span class=&quot;string&quot;&gt;&quot;male&quot;&lt;/span&gt;,age:48,career:&lt;span class=&quot;string&quot;&gt;&quot;actor&quot;&lt;/span&gt;,photo:&lt;span class=&quot;string&quot;&gt;&quot;http://b.hiphotos.baidu.com/baike/w%3D268/sign=a03742145bee3d6d22c680cd7b176d41/359b033b5bb5c9eae4c45250d739b6003af3b34a.jpg&quot;&lt;/span&gt;&amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;					&amp;#123;name:&lt;span class=&quot;string&quot;&gt;&quot;Jessica Alba&quot;&lt;/span&gt;,gender:&lt;span class=&quot;string&quot;&gt;&quot;female&quot;&lt;/span&gt;,age:32,career:&lt;span class=&quot;string&quot;&gt;&quot;actress&quot;&lt;/span&gt;,photo:&lt;span class=&quot;string&quot;&gt;&quot;http://h.hiphotos.baidu.com/baike/w%3D268/sign=ce8cdcb43bdbb6fd255be2203125aba6/b219ebc4b74543a91d7092831c178a82b9011411.jpg&quot;&lt;/span&gt;&amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;					&amp;#123;name:&lt;span class=&quot;string&quot;&gt;&quot;Nicolas Cage&quot;&lt;/span&gt;,gender:&lt;span class=&quot;string&quot;&gt;&quot;male&quot;&lt;/span&gt;,age:53,career:&lt;span class=&quot;string&quot;&gt;&quot;actor&quot;&lt;/span&gt;,photo:&lt;span class=&quot;string&quot;&gt;&quot;http://f.hiphotos.baidu.com/baike/w%3D268/sign=e97412d2359b033b2c88fbdc2dcf3620/4a36acaf2edda3cc4187b7f600e93901203f9280.jpg&quot;&lt;/span&gt;&amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;					&amp;#123;name:&lt;span class=&quot;string&quot;&gt;&quot;崔永元&quot;&lt;/span&gt;,gender:&lt;span class=&quot;string&quot;&gt;&quot;male&quot;&lt;/span&gt;,age:48,career:&lt;span class=&quot;string&quot;&gt;&quot;independent journalist&quot;&lt;/span&gt;,photo:&lt;span class=&quot;string&quot;&gt;&quot;http://e.hiphotos.baidu.com/baike/w%3D268/sign=856e3aab34d3d539c13d08c50286e927/8c1001e93901213ff48a548956e736d12f2e952d.jpg&quot;&lt;/span&gt;&amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;					&amp;#123;name:&lt;span class=&quot;string&quot;&gt;&quot;Sheetal Sheth&quot;&lt;/span&gt;,gender:&lt;span class=&quot;string&quot;&gt;&quot;female&quot;&lt;/span&gt;,age:36,career:&lt;span class=&quot;string&quot;&gt;&quot;actress&quot;&lt;/span&gt;,photo:&lt;span class=&quot;string&quot;&gt;&quot;http://h.hiphotos.baidu.com/baike/c0%3Dbaike80%2C5%2C5%2C80%2C26/sign=f3627d0333fa828bc52e95b19c762a51/060828381f30e924f7c565374c086e061d95f757.jpg&quot;&lt;/span&gt;&amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;					&amp;#123;name:&lt;span class=&quot;string&quot;&gt;&quot;Barack Obama&quot;&lt;/span&gt;,gender:&lt;span class=&quot;string&quot;&gt;&quot;male&quot;&lt;/span&gt;,age:58,career:&lt;span class=&quot;string&quot;&gt;&quot;president&quot;&lt;/span&gt;,photo:&lt;span class=&quot;string&quot;&gt;&quot;http://a.hiphotos.baidu.com/baike/w%3D268/sign=2a0045f7f1d3572c66e29bdab2126352/f7246b600c338744cb293d62520fd9f9d72aa03b.jpg&quot;&lt;/span&gt;&amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;					&amp;#123;name:&lt;span class=&quot;string&quot;&gt;&quot;Владимир Владимирович Путин&quot;&lt;/span&gt;,gender:&lt;span class=&quot;string&quot;&gt;&quot;male&quot;&lt;/span&gt;,age:63,career:&lt;span class=&quot;string&quot;&gt;&quot;president&quot;&lt;/span&gt;,photo:&lt;span class=&quot;string&quot;&gt;&quot;http://h.hiphotos.baidu.com/baike/w%3D268/sign=657e210bb17eca8012053ee1a9239712/8435e5dde71190efa1a915f7cf1b9d16fdfa604c.jpg&quot;&lt;/span&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				var idx = Math.floor(Math.random()*repo.length);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				&lt;span class=&quot;variable&quot;&gt;$scope&lt;/span&gt;.vm.sb = repo[idx];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;angular.module(&lt;span class=&quot;string&quot;&gt;&quot;ezstuff&quot;&lt;/span&gt;,[])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;.controller(&lt;span class=&quot;string&quot;&gt;&quot;ezController&quot;&lt;/span&gt;,ezControllerClass);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;服务&quot;&gt;&lt;a href=&quot;#服务&quot; class=&quot;headerlink&quot; title=&quot;服务&quot;&gt;&lt;/a&gt;服务&lt;/h3&gt;&lt;h4 id=&quot;创建服务组件&quot;&gt;&lt;a href=&quot;#创建服务组件&quot; class=&quot;headerlink&quot; title=&quot;创建服务组件&quot;&gt;&lt;/a&gt;创建服务组件&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;在AngularJS中创建一个服务组件很简单， 只需要定一个具有$get方法的构造函数  然后使用模块的provider方法进行登记：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;//定义构造函数&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var myServiceProvider = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;/span&gt;()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    this.&lt;span class=&quot;variable&quot;&gt;$get&lt;/span&gt; = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;/span&gt;()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; ....&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//在模块中登记&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;angular.module(&lt;span class=&quot;string&quot;&gt;&quot;myModule&quot;&lt;/span&gt;,[])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;provider(&lt;span class=&quot;string&quot;&gt;&quot;myService&quot;&lt;/span&gt;,myServiceProvider);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;可配置的服务&quot;&gt;&lt;a href=&quot;#可配置的服务&quot; class=&quot;headerlink&quot; title=&quot;可配置的服务&quot;&gt;&lt;/a&gt;可配置的服务&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;有时我们希望服务在不同的场景下可以有不同的行为，这意味着服务可以进行配置。&lt;/p&gt;
&lt;p&gt;比如，我们希望小计算器可以根据不同的本地化区域，给计算结果追加货币符号前缀， 那么需要在这个服务创建之前，首先配置本地化区域的值，然后在具体的计算中， 根据这个值选择合适的货币符号。&lt;/p&gt;
&lt;p&gt;AngularJS使用模块的config()方法对服务进行配置，需要将实例化的服务提供者 （而不是服务实例）注入到配置函数中：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;angular.module(&lt;span class=&quot;string&quot;&gt;&quot;myModule&quot;&lt;/span&gt;,[])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   config([&lt;span class=&quot;string&quot;&gt;&quot;myServiceProvider&quot;&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(myServiceProvider)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    //&lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; some configuration.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;]);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;友情提醒&quot;&gt;&lt;a href=&quot;#友情提醒&quot; class=&quot;headerlink&quot; title=&quot;友情提醒&quot;&gt;&lt;/a&gt;友情提醒&lt;/h2&gt;&lt;p&gt;如有疑问和错误之处，请告知&lt;a href=&quot;http://weibo.com/5979213215/profile?topnav=1&amp;amp;wvr=6&amp;amp;is_all=1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;程序员小鲁&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      这是一篇angular文章，主要讲解angular的功能代码和详细说明
    
    </summary>
    
      <category term="gulp使用" scheme="http://yoursite.com/categories/gulp%E4%BD%BF%E7%94%A8/"/>
    
      <category term="html5" scheme="http://yoursite.com/categories/gulp%E4%BD%BF%E7%94%A8/html5/"/>
    
    
      <category term="gulp" scheme="http://yoursite.com/tags/gulp/"/>
    
      <category term="代码压缩" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E5%8E%8B%E7%BC%A9/"/>
    
      <category term="文件合并" scheme="http://yoursite.com/tags/%E6%96%87%E4%BB%B6%E5%90%88%E5%B9%B6/"/>
    
  </entry>
  
  <entry>
    <title>angularJS进阶阶段(3)</title>
    <link href="http://yoursite.com/2016/06/08/angular-3%E8%BF%9B%E9%98%B6%E9%98%B6%E6%AE%B5/"/>
    <id>http://yoursite.com/2016/06/08/angular-3进阶阶段/</id>
    <published>2016-06-08T02:45:25.000Z</published>
    <updated>2016-07-25T14:31:00.210Z</updated>
    
    <content type="html">&lt;hr&gt;
&lt;h2 id=&quot;angularJS进阶阶段-3&quot;&gt;&lt;a href=&quot;#angularJS进阶阶段-3&quot; class=&quot;headerlink&quot; title=&quot;angularJS进阶阶段(3)&quot;&gt;&lt;/a&gt;angularJS进阶阶段(3)&lt;/h2&gt;&lt;h3 id=&quot;引导之前：库阶段&quot;&gt;&lt;a href=&quot;#引导之前：库阶段&quot; class=&quot;headerlink&quot; title=&quot;引导之前：库阶段&quot;&gt;&lt;/a&gt;引导之前：库阶段&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;当你在HTML文件中引入angular.min.js时，AngularJS只是建立了一个全局的 angular对象，这个对象有一些方法可供开发者调用，但应用的框架还没有建立。&lt;/p&gt;
&lt;p&gt;在这个阶段，AngularJS还只是一个库，和jQuery类似，你可以使用angular.element() 操作DOM，也可以使用angular.injector()创建注入器… 但是，你定义的指令，你 创建的控制器，你封装的服务，你开发的模板…所有这些组件，还静静地躺在那里， 没有被整合在一起。&lt;/p&gt;
&lt;p&gt;我们说，框架还没有运转起来，现在还是库阶段。&lt;/p&gt;
&lt;p&gt;只有通过启动引导，AngularJS框架才开始将那些组件拼接在一起，应用才真正 开始运转。&lt;/p&gt;
&lt;p&gt;像下面这样，试着给html元素增加一个ng-app指令，再重新运行！&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;html&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;head&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;script src=&lt;span class=&quot;string&quot;&gt;&quot;http://lib.sinaapp.com/js/angular.js/angular-1.2.19/angular.min.js&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/head&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;body&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;p&amp;gt;应该在下面看到一幅动画才对！&amp;lt;/p&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;ez-duang&amp;gt;&amp;lt;/ez-duang&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/body&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/html&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;angular.module(&lt;span class=&quot;string&quot;&gt;&quot;ezstuff&quot;&lt;/span&gt;,[])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;.directive(&lt;span class=&quot;string&quot;&gt;&quot;ezDuang&quot;&lt;/span&gt;,&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;/span&gt;()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		restrict : &lt;span class=&quot;string&quot;&gt;&quot;E&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		template : &lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;img src=&#39;http://ww4.sinaimg.cn/bmiddle/757eb2ffjw1eptcr4qobjg209205dthh.gif&#39;&amp;gt;&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;动引导启动框架&quot;&gt;&lt;a href=&quot;#动引导启动框架&quot; class=&quot;headerlink&quot; title=&quot;动引导启动框架&quot;&gt;&lt;/a&gt;动引导启动框架&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;就像你看到的那样，如果HTML模板中有某个标签有ng-app属性，那么当DOM树建立成功后， AngularJS就会自动进入引导过程，启动整个框架：&lt;br&gt;&lt;img src=&quot;/img/angular-3进阶1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;手工引导启动框架&quot;&gt;&lt;a href=&quot;#手工引导启动框架&quot; class=&quot;headerlink&quot; title=&quot;手工引导启动框架&quot;&gt;&lt;/a&gt;手工引导启动框架&lt;/h3&gt;&lt;p&gt;&lt;code&gt;angular.bootstrap(element, [modules], [config]);&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;bootstrap方法有三个参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;element ： 一个DOM元素，以这个元素为Angular应用的根，等同自动引导时ng-app所在 的元素。这个参数是必须的。比如：document、document.body等。&lt;/li&gt;
&lt;li&gt;modules ： 引导时需要载入的模块数组。比如：[]、[“ezstuff”]等。由于我们的HTML中引用 了ezstuff模块中定义的ez-duang指令，所以，我们需要指定载入ezstuff模块。&lt;/li&gt;
&lt;li&gt;config ：引导配置项，可选。我们先忽略。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt; &lt;code&gt;1.angular.bootstrap(document,[&amp;quot;ezstuff&amp;quot;]); 手动引导&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;引导第1步：创建注入器&quot;&gt;&lt;a href=&quot;#引导第1步：创建注入器&quot; class=&quot;headerlink&quot; title=&quot;引导第1步：创建注入器&quot;&gt;&lt;/a&gt;引导第1步：创建注入器&lt;/h3&gt;&lt;p&gt; 回忆我们之前提到，AngularJS深入骨髓地使用着依赖注入，那么，在引导过程 之初，首先需要创建一个注入器就毫不奇怪了。&lt;br&gt; 注入器是通向AngularJS所有功能的入口，而AngularJS的功能实现，是通过模块的方式组织的。所以， 在创建注入器的时候，需要告诉AngularJS载入哪些模块（ng模块是内置载入的，不需要显式指定）。&lt;br&gt; &lt;img src=&quot;/img/angular-3进阶3.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;在自动启动引导的场景下，可以给ng-app赋值以指定一个需要载入的模块，比如：&lt;br&gt;&lt;code&gt;ng-app = &amp;quot;ezstuff&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在手动启动引导的场景下，通过bootstrap方法的第二个参数指定需要载入的模块，比如：&lt;br&gt;&lt;code&gt;angular.bootstrap(document,[&amp;quot;ezstuff&amp;quot;]);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;INSIDE：无论自动启动还是手工启动，最终都是调用angular对象上的injector()方法创建了一个 注入器，然后把这个注入器存入了根对象的data里：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1.var injector = angular.injector([&lt;span class=&quot;string&quot;&gt;&quot;ng&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;ezstuff&quot;&lt;/span&gt;]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2.angular.element(document).data(&lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$injector&lt;/span&gt;&quot;&lt;/span&gt;,injector);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们在下面的代码中，开始模拟引导启动过程的第一步：创建注入器。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;html&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;head&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;script src=&lt;span class=&quot;string&quot;&gt;&quot;http://lib.sinaapp.com/js/angular.js/angular-1.2.19/angular.min.js&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/head&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;body&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;p&amp;gt;现在还看不到动画！&amp;lt;/p&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;ez-duang&amp;gt;&amp;lt;/ez-duang&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/body&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/html&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//模拟引导启动过程&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;angular.element(document).ready(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;/span&gt;()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	//第一步：创建注入器并保存到根对象的data中&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	var injector = angular.injector([&lt;span class=&quot;string&quot;&gt;&quot;ng&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;ezstuff&quot;&lt;/span&gt;]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	angular.element(document).data(&lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$injector&lt;/span&gt;&quot;&lt;/span&gt;,injector);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;angular.module(&lt;span class=&quot;string&quot;&gt;&quot;ezstuff&quot;&lt;/span&gt;,[])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;.directive(&lt;span class=&quot;string&quot;&gt;&quot;ezDuang&quot;&lt;/span&gt;,&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;/span&gt;()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		restrict : &lt;span class=&quot;string&quot;&gt;&quot;E&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		template : &lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;img src=&#39;http://ww4.sinaimg.cn/bmiddle/757eb2ffjw1eptcr4qobjg209205dthh.gif&#39;&amp;gt;&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;引导第2步：创建根作用域&quot;&gt;&lt;a href=&quot;#引导第2步：创建根作用域&quot; class=&quot;headerlink&quot; title=&quot;引导第2步：创建根作用域&quot;&gt;&lt;/a&gt;引导第2步：创建根作用域&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;scope对象是AngularJS实现数据绑定的重要服务，所以，在引导启动建立了注入器之后， AngularJS马上在应用的根节点上创建一个根作用域：$rootScope对象。&lt;br&gt;&lt;img src=&quot;/img/angular-3进阶4.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;如果是自动引导启动，那么ng-app所在的DOM节点对应着根作用域。如果是手工引导启动， 那么在bootstrap方法中指定的第一个参数就对应着根作用域。&lt;br&gt;无论哪一种情况，一旦$rootScope对象创建成功，AngularJS就将这个对象存储到根节点 的data中，我们可以使用如下的方法查看这个对象：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;html&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;head&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;script src=&lt;span class=&quot;string&quot;&gt;&quot;http://lib.sinaapp.com/js/angular.js/angular-1.2.19/angular.min.js&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/head&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;body&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;p&amp;gt;现在还看不到动画！&amp;lt;/p&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;ez-duang&amp;gt;&amp;lt;/ez-duang&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/body&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/html&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//模拟引导启动过程&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;angular.element(document).ready(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;/span&gt;()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	//第一步：创建注入器并保存到根对象的data中&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	var injector = angular.injector([&lt;span class=&quot;string&quot;&gt;&quot;ng&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;ezstuff&quot;&lt;/span&gt;]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	angular.element(document).data(&lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$injector&lt;/span&gt;&quot;&lt;/span&gt;,injector);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	//第二步：创建根作用域并保存到根对象的data中&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	var rootScope = injector.get(&lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$rootScope&lt;/span&gt;&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	angular.element(document).data(&lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$rootScope&lt;/span&gt;&quot;&lt;/span&gt;,rootScope);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;angular.module(&lt;span class=&quot;string&quot;&gt;&quot;ezstuff&quot;&lt;/span&gt;,[])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;.directive(&lt;span class=&quot;string&quot;&gt;&quot;ezDuang&quot;&lt;/span&gt;,&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;/span&gt;()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		restrict : &lt;span class=&quot;string&quot;&gt;&quot;E&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		template : &lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;img src=&#39;http://ww4.sinaimg.cn/bmiddle/757eb2ffjw1eptcr4qobjg209205dthh.gif&#39;&amp;gt;&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;引导第3步：编译DOM子树&quot;&gt;&lt;a href=&quot;#引导第3步：编译DOM子树&quot; class=&quot;headerlink&quot; title=&quot;引导第3步：编译DOM子树&quot;&gt;&lt;/a&gt;引导第3步：编译DOM子树&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;引导过程的最后一步，是以ng-app所在DOM节点为根节点，对这棵DOM子树进行编译。&lt;br&gt;&lt;img src=&quot;/img/angular-3进阶5.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;编译过程通常借助于指令，完成这几种操作：&lt;br&gt;  1.对DOM对象进行变换。&lt;br&gt;  2.在DOM对象上挂接事件监听。&lt;br&gt;  3.在DOM对象对应的scope对象上挂接数据监听。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;html&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;head&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;script src=&lt;span class=&quot;string&quot;&gt;&quot;http://lib.sinaapp.com/js/angular.js/angular-1.2.19/angular.min.js&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/head&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;body&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;p&amp;gt;应该在下面看到一幅动画才对！&amp;lt;/p&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;ez-duang&amp;gt;&amp;lt;/ez-duang&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/body&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/html&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//模拟引导启动过程&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;angular.element(document).ready(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;/span&gt;()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	//第一步：创建注入器并保存到根对象的data中&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	var injector = angular.injector([&lt;span class=&quot;string&quot;&gt;&quot;ng&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;ezstuff&quot;&lt;/span&gt;]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	angular.element(document).data(&lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$injector&lt;/span&gt;&quot;&lt;/span&gt;,injector);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	//第二步：创建根作用域并保存到根对象的data中&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	var rootScope = injector.get(&lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$rootScope&lt;/span&gt;&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	angular.element(document).data(&lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$rootScope&lt;/span&gt;&quot;&lt;/span&gt;,rootScope);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	//第三步：编译DOM树&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	var compile = injector.get(&lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$compile&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	compile(document)(rootScope);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;angular.module(&lt;span class=&quot;string&quot;&gt;&quot;ezstuff&quot;&lt;/span&gt;,[])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;.directive(&lt;span class=&quot;string&quot;&gt;&quot;ezDuang&quot;&lt;/span&gt;,&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;/span&gt;()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		restrict : &lt;span class=&quot;string&quot;&gt;&quot;E&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		template : &lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;img src=&#39;http://ww4.sinaimg.cn/bmiddle/757eb2ffjw1eptcr4qobjg209205dthh.gif&#39;&amp;gt;&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;友情提醒&quot;&gt;&lt;a href=&quot;#友情提醒&quot; class=&quot;headerlink&quot; title=&quot;友情提醒&quot;&gt;&lt;/a&gt;友情提醒&lt;/h2&gt;&lt;p&gt;如有疑问和错误之处，请告知&lt;a href=&quot;http://weibo.com/5979213215/profile?topnav=1&amp;amp;wvr=6&amp;amp;is_all=1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;程序员小鲁&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      这是一篇angular文章，主要讲解angular的功能代码和详细说明
    
    </summary>
    
      <category term="gulp使用" scheme="http://yoursite.com/categories/gulp%E4%BD%BF%E7%94%A8/"/>
    
      <category term="html5" scheme="http://yoursite.com/categories/gulp%E4%BD%BF%E7%94%A8/html5/"/>
    
    
      <category term="gulp" scheme="http://yoursite.com/tags/gulp/"/>
    
      <category term="代码压缩" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E5%8E%8B%E7%BC%A9/"/>
    
      <category term="文件合并" scheme="http://yoursite.com/tags/%E6%96%87%E4%BB%B6%E5%90%88%E5%B9%B6/"/>
    
  </entry>
  
  <entry>
    <title>angularJS进阶阶段(2)</title>
    <link href="http://yoursite.com/2016/06/05/angular-2%E8%BF%9B%E9%98%B6%E9%98%B6%E6%AE%B5/"/>
    <id>http://yoursite.com/2016/06/05/angular-2进阶阶段/</id>
    <published>2016-06-05T07:05:15.000Z</published>
    <updated>2016-07-25T14:02:22.451Z</updated>
    
    <content type="html">&lt;hr&gt;
&lt;h2 id=&quot;angularJS进阶阶段-2&quot;&gt;&lt;a href=&quot;#angularJS进阶阶段-2&quot; class=&quot;headerlink&quot; title=&quot;angularJS进阶阶段(2)&quot;&gt;&lt;/a&gt;angularJS进阶阶段(2)&lt;/h2&gt;&lt;h3 id=&quot;angularJS的API&quot;&gt;&lt;a href=&quot;#angularJS的API&quot; class=&quot;headerlink&quot; title=&quot;angularJS的API&quot;&gt;&lt;/a&gt;angularJS的API&lt;/h3&gt;&lt;p&gt;AngularJS提供了一些功能的封装，但是当你试图通过全局对象angular去 访问这些功能时，却发现与以往遇到的库大不相同。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;$http&lt;br&gt;  比如，在jQuery中，我们知道它的API通过一个全局对象：$ 暴露出来，当你需要 进行ajax调用时，使用$.ajax()就可以了。这样的API很符合思维的预期。&lt;/li&gt;
&lt;li&gt;依赖注入/DI 数据输入&lt;br&gt;  事实上，AngularJS把所有的功能组件都以依赖注入的方式组织起来：&lt;br&gt;&lt;img src=&quot;/img/angular-2进阶1.png&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;在依赖注入的模式下，所有的组件必须通过容器才能相互访问，这导致了在AngularJS中， 你必须通过一个中介才能获得某个组件的实例对象：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var injector = angular.injector([&lt;span class=&quot;string&quot;&gt;&#39;ng&#39;&lt;/span&gt;]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;injector.invoke(&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;variable&quot;&gt;$http&lt;/span&gt;)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    //&lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; sth. with &lt;span class=&quot;variable&quot;&gt;$http&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这个中介，就是依赖注入模式中的容器，在AngularJS中，被称为：注入器。&lt;br&gt;在→_→的示例中，我们可以看到，我们已经拿到了$http对象，它其实是一个函数。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;html&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;head&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;script src=&lt;span class=&quot;string&quot;&gt;&quot;http://lib.sinaapp.com/js/angular.js/angular-1.2.19/angular.min.js&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/head&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;body&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;!--在这里显示&lt;span class=&quot;variable&quot;&gt;$http&lt;/span&gt;的内容--&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;div id=&lt;span class=&quot;string&quot;&gt;&quot;logger&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/body&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/html&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;angular.element(document).ready(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;/span&gt;()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	angular.injector([&lt;span class=&quot;string&quot;&gt;&quot;ng&quot;&lt;/span&gt;]).invoke(&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;variable&quot;&gt;$http&lt;/span&gt;)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		//将&lt;span class=&quot;variable&quot;&gt;$http&lt;/span&gt;对象转成字符串显示出来&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		var e = document.querySelector(&lt;span class=&quot;string&quot;&gt;&quot;#logger&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		angular.element(e).text(&lt;span class=&quot;variable&quot;&gt;$http&lt;/span&gt;.toString());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;注入器&quot;&gt;&lt;a href=&quot;#注入器&quot; class=&quot;headerlink&quot; title=&quot;注入器&quot;&gt;&lt;/a&gt;注入器&lt;/h3&gt;&lt;p&gt;&lt;code&gt;注入器是AngularJS框架实现和应用开发的关键，这是一个DI/IoC容器的实现。&lt;/code&gt;&lt;br&gt;AngularJS将功能分成了不同类型的组件分别实现，这些组件有一个统称 - 供给者/provider， 下图中列出了AngularJS几个常用的内置服务：&lt;br&gt;&lt;img src=&quot;/img/angular-2进阶2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;AngularJS的组件之间不可以互相直接调用，一个组件必须通过注入器才 可以调用另一个组件。这样的好处是组件之间相互解耦，对象的整个生命周期的管理 甩给了注入器。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注入器实现了两个重要的功能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;集中存储所有provider的配方&lt;br&gt;配方其实就是：名称+类构造函数。AngularJS启动时，这些provider首先使用其配方在注入器 内注册。比如，http请求服务组件封装在$httpProvider类内，它通过”$http”这个名字在注入器内注册。&lt;/li&gt;
&lt;li&gt;按需提供功能组件的实例&lt;br&gt;其他组件，比如一个用户的控制器，如果需要使用http功能，使用”$http”这个名字 向注入器请求，就可以获得一个http服务实例了。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;注册服务组件&quot;&gt;&lt;a href=&quot;#注册服务组件&quot; class=&quot;headerlink&quot; title=&quot;注册服务组件&quot;&gt;&lt;/a&gt;注册服务组件&lt;/h3&gt;&lt;p&gt;从injector的角度看，组件就是一个功能提供者，因此被称为供给者/Provider。 在AngularJS中，provider以JavaScript类（构造函数）的形式封装。&lt;br&gt;&lt;img src=&quot;/img/angular-2进阶3.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;服务名称通常使用一个字符串标识，比如”$http”代表http调用服务、”$rootScope”代表根 作用域对象、”$compile”代表编译服务…&lt;br&gt;Provider类要求提供一个$get函数（类工厂），injector通过调用该函数， 就可以获得服务组件的实例。&lt;br&gt;名称和类函数的组合信息，被称为配方。injector中维护一个集中的配方库， 用来按需创建不同的组件。这个配方库，其实就是一个Hash对象，key就是服务名称，value 就是类定义。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;html&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;head&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;script src=&lt;span class=&quot;string&quot;&gt;&quot;http://lib.sinaapp.com/js/angular.js/angular-1.2.19/angular.min.js&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/head&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;body&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;!--在这里显示ezHello实例的内容--&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;div id=&lt;span class=&quot;string&quot;&gt;&quot;logger&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/body&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/html&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//在ezstuff模块上登记一个服务ezHello&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;angular.module(&lt;span class=&quot;string&quot;&gt;&quot;ezstuff&quot;&lt;/span&gt;,[])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;.provider(&lt;span class=&quot;string&quot;&gt;&quot;ezHello&quot;&lt;/span&gt;,&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;/span&gt;()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	//&lt;span class=&quot;variable&quot;&gt;$get&lt;/span&gt;方法是一个类工厂，返回服务的实例&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	this.&lt;span class=&quot;variable&quot;&gt;$get&lt;/span&gt; = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;/span&gt;()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;hello,world!&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;angular.element(document).ready(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;/span&gt;()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	angular.injector([&lt;span class=&quot;string&quot;&gt;&quot;ng&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;ezstuff&quot;&lt;/span&gt;]).invoke(&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(ezHello)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		//将ezHello实例对象转成字符串显示出来&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		var e = document.querySelector(&lt;span class=&quot;string&quot;&gt;&quot;#logger&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		angular.element(e).text(ezHello);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;获得注入器对象&quot;&gt;&lt;a href=&quot;#获得注入器对象&quot; class=&quot;headerlink&quot; title=&quot;获得注入器对象&quot;&gt;&lt;/a&gt;获得注入器对象&lt;/h3&gt;&lt;p&gt;要使用AngularJS的功能，必须首先获取注入器。有两种方法取得注入器。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;创建一个新的注入器&lt;br&gt;如果AngularJS框架已经启动，那么可以使用DOM对象的injector()方法获 得已经创建的注入器：&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var element = angular.element(dom_element);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var injector = element.injector();&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;通过注入器调用API&quot;&gt;&lt;a href=&quot;#通过注入器调用API&quot; class=&quot;headerlink&quot; title=&quot;通过注入器调用API&quot;&gt;&lt;/a&gt;通过注入器调用API&lt;/h3&gt;&lt;p&gt;注入器有两个方法可供进行API调用：invoke()和get()。&lt;/p&gt;
&lt;h4 id=&quot;invoke&quot;&gt;&lt;a href=&quot;#invoke&quot; class=&quot;headerlink&quot; title=&quot;invoke()&quot;&gt;&lt;/a&gt;invoke()&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;使用注入器的invoke()方法，可以直接调用一个用户自定义的函数体，并通过函数参数 注入所依赖的服务对象，这是AngularJS推荐和惯例的用法：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;angular.injector([&lt;span class=&quot;string&quot;&gt;&#39;ng&#39;&lt;/span&gt;])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;invoke(&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;variable&quot;&gt;$http&lt;/span&gt;)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    //&lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; sth. with &lt;span class=&quot;variable&quot;&gt;$http&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;下面的示例这次使用了get()方法直接获取一个服务实例，感受一下！&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;html&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;head&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;script src=&lt;span class=&quot;string&quot;&gt;&quot;http://lib.sinaapp.com/js/angular.js/angular-1.2.19/angular.min.js&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/head&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;body&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;!--在这里显示ezHello实例的内容--&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;div id=&lt;span class=&quot;string&quot;&gt;&quot;logger&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/body&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/html&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//在ezstuff模块上登记一个服务ezHello&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;angular.module(&lt;span class=&quot;string&quot;&gt;&quot;ezstuff&quot;&lt;/span&gt;,[])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;.provider(&lt;span class=&quot;string&quot;&gt;&quot;ezHello&quot;&lt;/span&gt;,&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;/span&gt;()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	//&lt;span class=&quot;variable&quot;&gt;$get&lt;/span&gt;方法是一个类工厂，返回服务的实例&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	this.&lt;span class=&quot;variable&quot;&gt;$get&lt;/span&gt; = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;/span&gt;()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;hello,world!&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;angular.element(document).ready(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;/span&gt;()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	//直接通过注入器获取ezHello实例对象&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	var myHello = angular.injector([&lt;span class=&quot;string&quot;&gt;&quot;ng&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;ezstuff&quot;&lt;/span&gt;]).get(&lt;span class=&quot;string&quot;&gt;&quot;ezHello&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	//将ezHello实例对象转成字符串显示出来&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	var e = document.querySelector(&lt;span class=&quot;string&quot;&gt;&quot;#logger&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	angular.element(e).text(myHello);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;注入器的方式和原理&quot;&gt;&lt;a href=&quot;#注入器的方式和原理&quot; class=&quot;headerlink&quot; title=&quot;注入器的方式和原理&quot;&gt;&lt;/a&gt;注入器的方式和原理&lt;/h3&gt;&lt;p&gt;有两种方法告知注入器需要注入的服务对象：参数名注入和依赖数组注入。&lt;/p&gt;
&lt;h4 id=&quot;1-参数名注入&quot;&gt;&lt;a href=&quot;#1-参数名注入&quot; class=&quot;headerlink&quot; title=&quot;1. 参数名注入&quot;&gt;&lt;/a&gt;1. 参数名注入&lt;/h4&gt;&lt;p&gt;AngularJS在执行invoke()函数时，将待注入函数定义转化为字符串，通过 正则表达式检查其参数表，从而发现并注入所所依赖的服务对象：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1.//myfunc通过参数表声明这个函数依赖于&lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$http&lt;/span&gt;&quot;&lt;/span&gt;服务&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2.var myfunc = &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;variable&quot;&gt;$http&lt;/span&gt;)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3.    //&lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; sth. with &lt;span class=&quot;variable&quot;&gt;$http&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4.&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5.injector.invoke(myfunc);//myfunc的定义将被转化为字符串进行参数名检查&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样有一个问题，就是当我们对JavaScript代码进行压缩处理时，$http可能会被 变更成其他名称，这将导致注入失败。&lt;/p&gt;
&lt;h4 id=&quot;2-依赖数组注入&quot;&gt;&lt;a href=&quot;#2-依赖数组注入&quot; class=&quot;headerlink&quot; title=&quot;2. 依赖数组注入&quot;&gt;&lt;/a&gt;2. 依赖数组注入&lt;/h4&gt;&lt;p&gt;AngularJS采用依赖项数组的方法解决代码压缩混淆产生的问题。这时传入invoke()的 是一个数组，数组的最后一项是实际要执行的函数，其他项则指明需要向该函数注入 的服务名称。注入器将按照数组中的顺序，依次向函数注入依赖对象。&lt;br&gt;采用这种方法，待注入函数的参数表的名称就无关紧要了：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1.//myfunc依赖于&lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$http&lt;/span&gt;&quot;&lt;/span&gt;和&lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$compile&lt;/span&gt;&quot;&lt;/span&gt;服务&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2.var myfunc = [&lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$http&lt;/span&gt;&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$compile&lt;/span&gt;&quot;&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(p1,p2)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3.    //&lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; sth. with p1(&lt;span class=&quot;variable&quot;&gt;$http&lt;/span&gt;),p2(&lt;span class=&quot;variable&quot;&gt;$compile&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4.&amp;#125;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5.injector.invoke(myfunc);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;html&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;head&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;script src=&lt;span class=&quot;string&quot;&gt;&quot;http://lib.sinaapp.com/js/angular.js/angular-1.2.19/angular.min.js&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/head&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;body&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;!--在这里显示ezHello实例的内容--&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;div id=&lt;span class=&quot;string&quot;&gt;&quot;logger&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/body&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/html&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//在ezstuff模块上登记一个服务ezHello&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;angular.module(&lt;span class=&quot;string&quot;&gt;&quot;ezstuff&quot;&lt;/span&gt;,[])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;.provider(&lt;span class=&quot;string&quot;&gt;&quot;ezHello&quot;&lt;/span&gt;,&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;/span&gt;()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	//&lt;span class=&quot;variable&quot;&gt;$get&lt;/span&gt;方法是一个类工厂，返回服务的实例&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	this.&lt;span class=&quot;variable&quot;&gt;$get&lt;/span&gt; = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;/span&gt;()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;hello,world!&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;angular.element(document).ready(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;/span&gt;()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	angular.injector([&lt;span class=&quot;string&quot;&gt;&quot;ng&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;ezstuff&quot;&lt;/span&gt;]).invoke([&lt;span class=&quot;string&quot;&gt;&quot;ezHello&quot;&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(hhh)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		//将ezHello实例对象转成字符串显示出来&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		var e = document.querySelector(&lt;span class=&quot;string&quot;&gt;&quot;#logger&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		angular.element(e).text(hhh);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h2 id=&quot;友情提醒&quot;&gt;&lt;a href=&quot;#友情提醒&quot; class=&quot;headerlink&quot; title=&quot;友情提醒&quot;&gt;&lt;/a&gt;友情提醒&lt;/h2&gt;&lt;p&gt;如有疑问和错误之处，请告知&lt;a href=&quot;http://weibo.com/5979213215/profile?topnav=1&amp;amp;wvr=6&amp;amp;is_all=1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;程序员小鲁&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      这是一篇angular文章，主要讲解angular的功能代码和详细说明
    
    </summary>
    
      <category term="gulp使用" scheme="http://yoursite.com/categories/gulp%E4%BD%BF%E7%94%A8/"/>
    
      <category term="html5" scheme="http://yoursite.com/categories/gulp%E4%BD%BF%E7%94%A8/html5/"/>
    
    
      <category term="gulp" scheme="http://yoursite.com/tags/gulp/"/>
    
      <category term="代码压缩" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E5%8E%8B%E7%BC%A9/"/>
    
      <category term="文件合并" scheme="http://yoursite.com/tags/%E6%96%87%E4%BB%B6%E5%90%88%E5%B9%B6/"/>
    
  </entry>
  
  <entry>
    <title>angularJS进阶阶段(1)</title>
    <link href="http://yoursite.com/2016/05/25/angular-1%E8%BF%9B%E9%98%B6%E9%98%B6%E6%AE%B5/"/>
    <id>http://yoursite.com/2016/05/25/angular-1进阶阶段/</id>
    <published>2016-05-25T02:05:09.000Z</published>
    <updated>2016-07-25T13:11:25.999Z</updated>
    
    <content type="html">&lt;hr&gt;
&lt;h2 id=&quot;angularJS进阶阶段-1&quot;&gt;&lt;a href=&quot;#angularJS进阶阶段-1&quot; class=&quot;headerlink&quot; title=&quot;angularJS进阶阶段(1)&quot;&gt;&lt;/a&gt;angularJS进阶阶段(1)&lt;/h2&gt;&lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;p&gt;AngularJS引入了三个主要的概念，期望让前端开发更系统化一些：&lt;br&gt;1.声明式界面开发&lt;br&gt;2.双向数据绑定&lt;br&gt;3.使用依赖注入解耦&lt;/p&gt;
&lt;h3 id=&quot;起点：声明化&quot;&gt;&lt;a href=&quot;#起点：声明化&quot; class=&quot;headerlink&quot; title=&quot;起点：声明化&quot;&gt;&lt;/a&gt;起点：声明化&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;基于前面的示例，我们容易感受到使用AngularJS进行应用开发的一个重要的思维模式： 从构造声明式界面入手。&lt;br&gt;在使用AngularJS进行前端开发时，始终应该从构造声明式界面模板开始，如果现成的指令不够 用，那么就定义自己的指令、实现自己的指令。这是一个迭代的过程。&lt;br&gt; 记住，指令是新型的API，用界面的声明化作为需求，来指导我们的代码封装。&lt;br&gt; &lt;img src=&quot;/img/angular-1进阶1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;层级的作用域&quot;&gt;&lt;a href=&quot;#层级的作用域&quot; class=&quot;headerlink&quot; title=&quot;层级的作用域&quot;&gt;&lt;/a&gt;层级的作用域&lt;/h3&gt;&lt;p&gt;在AngularJS中，ng-app开始的DOM子树上，每个DOM对象都有一个对应的scope对象。 比如，在我们的示例中，body对象对应一个scope对象（因为body元素有ng-app属性，所以 这个scope就是$rootScope对象），ez-namecard对象也对应一个scope对象……&lt;br&gt; &lt;img src=&quot;/img/angular-1进阶2.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;在默认情况下，一个DOM子元素不会创建新的作用域，也就是说，这个子元素所对应的 scope对象，其实就是它的最近一级的祖先对象对应的scope对象。比如，在我们的例子中， ez-namecard对应的scope对象，就是它的父对象即body对象的scope对象，恰好也就是 $rootScope对象；而ez-namecard有3个div子元素对应的scope对象，也是$rootScope对象。&lt;br&gt;有些指令会导致创建新的作用域，比如ng-controller。如果在一个DOM对象上创建了新 的作用域，那么这个scope对象的原型是其最近一级的组件对象的scope对象。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;监听数据的变化&quot;&gt;&lt;a href=&quot;#监听数据的变化&quot; class=&quot;headerlink&quot; title=&quot;监听数据的变化&quot;&gt;&lt;/a&gt;监听数据的变化&lt;/h3&gt;&lt;p&gt;AngularJS的scope对象可以使用$watch()方法，对建立在其上的变量的变化进行监听：&lt;br&gt;&lt;code&gt;1.$watch(watchExpression, listener, [objectEquality]);&lt;/code&gt;&lt;br&gt;$watch方法要求传入三个参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;watchExpression - 要监听的表达式，比如：”sb”&lt;/li&gt;
&lt;li&gt;listener - 变化发生时的回调函数，AngularJS将向这个函数传入新值和旧值&lt;/li&gt;
&lt;li&gt;objectEquality - 如果监听表达式的值是一个对象，应当将这个参数置为true。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;html&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;head&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;script src=&lt;span class=&quot;string&quot;&gt;&quot;http://lib.sinaapp.com/js/angular.js/angular-1.2.19/angular.min.js&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/head&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;body ng-app=&lt;span class=&quot;string&quot;&gt;&quot;ezstuff&quot;&lt;/span&gt; ng-init=&lt;span class=&quot;string&quot;&gt;&quot;sb = &amp;#123;name:&#39;somebody&#39;,gender:&#39;male&#39;,age:28&amp;#125;&quot;&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;ez-namecard data=&lt;span class=&quot;string&quot;&gt;&quot;sb&quot;&lt;/span&gt;&amp;gt;&amp;lt;/ez-namecard&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/body&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/html&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;angular.module(&lt;span class=&quot;string&quot;&gt;&quot;ezstuff&quot;&lt;/span&gt;,[])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;.directive(&lt;span class=&quot;string&quot;&gt;&quot;ezNamecard&quot;&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;variable&quot;&gt;$rootScope&lt;/span&gt;)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		restrict : &lt;span class=&quot;string&quot;&gt;&quot;E&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		template : &lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;div class=&#39;namecard&#39;&amp;gt;&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		replace : &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		link : &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(scope,element,attrs)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			element.append(&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;div&amp;gt;name : &amp;lt;span class=&#39;name&#39;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				.append(&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;div&amp;gt;gender : &amp;lt;span field=&#39;gender&#39;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				.append(&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;div&amp;gt;age : &amp;lt;span field=&#39;age&#39;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			//监听sb变量的变化，并在变化时更新DOM&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			scope.&lt;span class=&quot;variable&quot;&gt;$watch&lt;/span&gt;(attrs.data,&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(nv,ov)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				var fields = element.find(&lt;span class=&quot;string&quot;&gt;&quot;span&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				fields[0].textContent = nv.name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				fields[1].textContent = nv.gender;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				fields[2].textContent = nv.age;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&amp;#125;,&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			//验证代码，1秒改变1次age的值&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;Interval(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;/span&gt;()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				scope.&lt;span class=&quot;variable&quot;&gt;$apply&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;sb.age=sb.age+1;&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&amp;#125;,1000);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;如何修改数据&quot;&gt;&lt;a href=&quot;#如何修改数据&quot; class=&quot;headerlink&quot; title=&quot;如何修改数据&quot;&gt;&lt;/a&gt;如何修改数据&lt;/h3&gt;&lt;p&gt;我们定义一个新的指令：ez-namecard-editor用来修改数据&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;ul&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;li&amp;gt;name : &amp;lt;input &lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&#39;text&#39;&lt;/span&gt;&amp;gt; &amp;lt;/li&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;li&amp;gt;gender : &amp;lt;input &lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&#39;text&#39;&lt;/span&gt;&amp;gt; &amp;lt;/li&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;li&amp;gt;age : &amp;lt;input &lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&#39;text&#39;&lt;/span&gt;&amp;gt;&amp;lt;/li&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在ez-namecard-editor的指令实现中，为了用input中的值自动更新 sb变量中的值，我们需要在给input对象挂接上监听函数（示例中使用keyup事件）， 在监听函数中实现对sb变量的修改。&lt;br&gt;最终的效果是，用户在界面上进行的操作，自动地同步到了我们的数据。这时，我们称， 已经建立了从界面到数据的单向绑定。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;html&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;head&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;script src=&lt;span class=&quot;string&quot;&gt;&quot;http://lib.sinaapp.com/js/angular.js/angular-1.2.19/angular.min.js&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/head&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;body ng-app=&lt;span class=&quot;string&quot;&gt;&quot;ezstuff&quot;&lt;/span&gt; ng-init=&lt;span class=&quot;string&quot;&gt;&quot;sb = &amp;#123;name:&#39;somebody&#39;,gender:&#39;male&#39;,age:28&amp;#125;&quot;&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;!-- 下面两个指令都绑定到变量sb上--&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;ez-namecard-editor data=&lt;span class=&quot;string&quot;&gt;&quot;sb&quot;&lt;/span&gt;&amp;gt;&amp;lt;/ez-namecard-editor&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;div ez-logger data=&lt;span class=&quot;string&quot;&gt;&quot;sb&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/body&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/html&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;angular.module(&lt;span class=&quot;string&quot;&gt;&quot;ezstuff&quot;&lt;/span&gt;,[])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;.directive(&lt;span class=&quot;string&quot;&gt;&quot;ezNamecardEditor&quot;&lt;/span&gt;,&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;/span&gt;()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		restrict : &lt;span class=&quot;string&quot;&gt;&quot;E&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		template : &lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;ul class=&#39;nceditor&#39;&amp;gt;&amp;lt;/ul&amp;gt;&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		replace : &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		link : &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(scope,element,attrs)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			//获得变量名称&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			var model = attrs.data;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			//展开HTML模板，使用field属性标记对应字段&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			element.append(&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;li&amp;gt;name : &amp;lt;input type=&#39;text&#39; field=&#39;name&#39;&amp;gt;&amp;lt;/li&amp;gt;&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				.append(&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;li&amp;gt;gender : &amp;lt;input type=&#39;text&#39; field=&#39;gender&#39;&amp;gt;&amp;lt;/li&amp;gt;&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				.append(&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;li&amp;gt;age : &amp;lt;input type=&#39;text&#39; field=&#39;age&#39;&amp;gt;&amp;lt;/li&amp;gt;&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			//监听DOM事件，变化时修改变量值&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			element.find(&lt;span class=&quot;string&quot;&gt;&quot;input&quot;&lt;/span&gt;).on(&lt;span class=&quot;string&quot;&gt;&quot;keyup&quot;&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(ev)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				var field = ev.target.getAttribute(&lt;span class=&quot;string&quot;&gt;&quot;field&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				scope[model][field] = ev.target.value;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				//将对scope的修改进行传播&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				scope.&lt;span class=&quot;variable&quot;&gt;$apply&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;.directive(&lt;span class=&quot;string&quot;&gt;&quot;ezLogger&quot;&lt;/span&gt;,&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;/span&gt;()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		restrict : &lt;span class=&quot;string&quot;&gt;&quot;A&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		link : &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(scope,element,attrs)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			var model = attrs.data;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			scope.&lt;span class=&quot;variable&quot;&gt;$watch&lt;/span&gt;(model,&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(nv)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				var cnt = JSON.stringify(nv,null,&lt;span class=&quot;string&quot;&gt;&quot;	&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				element.html(&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;pre&amp;gt;&quot;&lt;/span&gt;+cnt+&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;/pre	&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&amp;#125;,&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;数据变化的传播&quot;&gt;&lt;a href=&quot;#数据变化的传播&quot; class=&quot;headerlink&quot; title=&quot;数据变化的传播&quot;&gt;&lt;/a&gt;数据变化的传播&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;数据绑定有两个方向：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;数据 → 界面：我们使用scope对象的$watch()方法监听数据的变化，来更新界面。&lt;/li&gt;
&lt;li&gt;界面 → 数据：我们在界面的DOM对象上监听变化事件，来更新数据，并通过$apply()方法传播变化。&lt;br&gt;&lt;img src=&quot;/img/angular-1进阶3.png&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;上面的图中，我们把ez-namecard和ez-namecard-editor都绑定到同一个sb对象上，那么在 ez-namecard-editor上进行编辑，将导致sb对象发生变化；由于ez-namecard监听了这个变化， 所以，ez-namecard的显示也应该变化。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;$watch()&lt;br&gt;每个scope对象都维护了一个私有的监听队列，每次当我们在scope上执行一次$watch方法，就相当于 向这个监听队列里塞入一个监听函数。&lt;/li&gt;
&lt;li&gt;$apply()&lt;br&gt;为了捕捉对数据的修改，AngularJS要求开发者使用scope对象的$apply方法对数据进行修改， $apply方法内部会自动地调用监听队列里的监听函数，比如：&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;//方法1：直接修改sb对象. 不会自动触发监听函数&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;scope.sb.name = &lt;span class=&quot;string&quot;&gt;&#39;Tonny&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//方法2：使用scope的&lt;span class=&quot;variable&quot;&gt;$apply&lt;/span&gt;方法，在数据修改后会自动触发监听函数&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;scope.&lt;span class=&quot;variable&quot;&gt;$apply&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;sb.name = &#39;Tonny&#39;&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//方法3：直接修改sb对象，然后调用&lt;span class=&quot;variable&quot;&gt;$apply&lt;/span&gt;方法来传播变化。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;scope.sb.name = &lt;span class=&quot;string&quot;&gt;&#39;Tonny&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;scope.&lt;span class=&quot;variable&quot;&gt;$apply&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;友情提醒&quot;&gt;&lt;a href=&quot;#友情提醒&quot; class=&quot;headerlink&quot; title=&quot;友情提醒&quot;&gt;&lt;/a&gt;友情提醒&lt;/h2&gt;&lt;p&gt;如有疑问和错误之处，请告知&lt;a href=&quot;http://weibo.com/5979213215/profile?topnav=1&amp;amp;wvr=6&amp;amp;is_all=1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;程序员小鲁&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      这是一篇angular文章，主要讲解angular的功能代码和详细说明
    
    </summary>
    
      <category term="gulp使用" scheme="http://yoursite.com/categories/gulp%E4%BD%BF%E7%94%A8/"/>
    
      <category term="html5" scheme="http://yoursite.com/categories/gulp%E4%BD%BF%E7%94%A8/html5/"/>
    
    
      <category term="gulp" scheme="http://yoursite.com/tags/gulp/"/>
    
      <category term="代码压缩" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E5%8E%8B%E7%BC%A9/"/>
    
      <category term="文件合并" scheme="http://yoursite.com/tags/%E6%96%87%E4%BB%B6%E5%90%88%E5%B9%B6/"/>
    
  </entry>
  
  <entry>
    <title>angular基础总结(2)</title>
    <link href="http://yoursite.com/2016/05/23/angular-2%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2016/05/23/angular-2基础总结/</id>
    <published>2016-05-23T01:25:33.000Z</published>
    <updated>2016-07-25T12:28:16.943Z</updated>
    
    <content type="html">&lt;hr&gt;
&lt;h2 id=&quot;angularJS基础学习-2&quot;&gt;&lt;a href=&quot;#angularJS基础学习-2&quot; class=&quot;headerlink&quot; title=&quot;angularJS基础学习(2)&quot;&gt;&lt;/a&gt;angularJS基础学习(2)&lt;/h2&gt;&lt;h3 id=&quot;MVVM简介&quot;&gt;&lt;a href=&quot;#MVVM简介&quot; class=&quot;headerlink&quot; title=&quot;MVVM简介&quot;&gt;&lt;/a&gt;MVVM简介&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;针对客户端应用开发AngularJS吸收了传统的MVC基本原则。MVC(Model-View-Controll)设计模式针对不同的人可能意味不同的东西 ,AngularJS并不执行传统意义上的MVC，更接近于MVVM。&lt;/p&gt;
&lt;p&gt;MVVM模式是Model-View-ViewMode模式的简称。由视图(View)、视图模型(ViewModel)、模型(Model)三部分组成，通过这三部分实现UI逻辑、呈现逻辑和状态控制、数据与业务逻辑的分离。&lt;/p&gt;
&lt;p&gt;Model将和ViewModel互动(通过$scope对象)，将监听Model的变化。这些可以通过View来发送和渲染，由HTML来展示你的 代码。View可以通过$routeProvider对象来支配，所以你可以深度的链接和组织你的View和Controller，将他们变成导航 URL。AngualrJS同时提供了无状态的Controller，可以用来初始化和控制$scope对象。&lt;/p&gt;
&lt;p&gt;Model与MVC模式一样，Model用于封装与应用程序的业务逻辑相关的数据以及对数据的处理方法。它具有对数据直接访问的权利，例如对数据库的访问，Model不依赖于View和ViewModel，也就是说，模型不关心会被如何显示或是如何被操作，模型也不能包含任何用户使用的与界面相关的逻辑。&lt;/p&gt;
&lt;p&gt;ViewModel是一个用来提供特别数据和方法从而维护指定view的对象,。ViewModel是$scope的对象，只存在于AnguarJS的应用中。$scope只是一个简单的js对象，这个对象使用简单的API来侦测和广播状态变化。&lt;/p&gt;
&lt;p&gt;Controller负责设置初始状态和参数化$scope方法用以控制行为。需要指出的controller并不保存状态也不和远程服务互动。&lt;/p&gt;
&lt;p&gt;View是AngularJS解析后渲染和绑定后生成的HTML。这个部分帮助你创建web应用的架构。$scope拥有一个针对数据的参考，controller定义行为，view处理布局和互动。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;使用MVVM模式有几大好处：&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;低耦合：View可以独立于Model变化和修改，一个ViewModel可以绑定到不同的View上，当View变化的时候Model可以不变，当Model变化的时候View也可以不变。&lt;/li&gt;
&lt;li&gt;可重用性：可以把一些视图的逻辑放在ViewModel里面，让很多View重用这段视图逻辑。&lt;/li&gt;
&lt;li&gt;独立开发：开发人员可以专注与业务逻辑和数据的开发(ViewModel)。设计人员可以专注于界面(View)的设计。&lt;/li&gt;
&lt;li&gt;可测试性：可以针对ViewModel来对界面(View)进行测试。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;控制器&quot;&gt;&lt;a href=&quot;#控制器&quot; class=&quot;headerlink&quot; title=&quot;控制器&quot;&gt;&lt;/a&gt;控制器&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;AngularJS控制器控制AngularJS应用程序的数据，是常规的JavaScript对象。&lt;/p&gt;
&lt;p&gt;ng-controller指令就是用来定义应用程序控制器的，并且同时创建了一个新的作用域关联到相应的DOM元素上。&lt;/p&gt;
&lt;p&gt;所谓作用域就是一个指向应用模型的对象，它是表达式的执行环境，作用域有层次结构，这个层次和相应的DOM几乎是一样的，作用域能监控表达式和传递事件并且可以从父作用域继承属性。&lt;/p&gt;
&lt;p&gt;每一个AngularJS应用都有一个绝对的根作用域。但也可能有多个子作用域。 一个应用可以有多个作用域，因为有一些指令会生成新的子作用域，当新作用域被创建的时候，他们会被当成子作用域添加到父作用域下，这使得作用域会变成一个和相应DOM结构一个的树状结构。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;现在我们就用ng-controller指令来创建一个简单的控制器定义，如下所示：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;div ng-app=&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt; ng-controller=&lt;span class=&quot;string&quot;&gt;&quot;MyController&quot;&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;请输入一个名字：&amp;lt;input &lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text&quot;&lt;/span&gt; ng-model=&lt;span class=&quot;string&quot;&gt;&quot;person.name&quot;&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Hello &amp;lt;span ng-bind=&lt;span class=&quot;string&quot;&gt;&quot;person.name&quot;&lt;/span&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;script&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; MyController(&lt;span class=&quot;variable&quot;&gt;$scope&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;variable&quot;&gt;$scope&lt;/span&gt;.person = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      name: &lt;span class=&quot;string&quot;&gt;&quot;World&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/script&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如上所述，我们通过ng-controller指令创建了一个JavaScript对象 —— MyController并带有name属性，那参数$scope是什么呢，代表什么意思呢。&lt;/p&gt;
&lt;p&gt;现在我们就来解答MyController对象参数 —— $scope。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;scope就是把一个DOM元素连结到控制器上的对象，它提供一个绑定到DOM元素(以及其子元素)上的执行上下文。它也是一个JavaScript对象，指向应用程序作用域内的所有HTML元素和执行上下文。作用域呢，就是作为$scope的数据属性关联到DOM上的，并且能在需要调试的时候被获取到。&lt;br&gt; 要明确创建一个$scope对象，我们就要给DOM元素安上一个controller对象，使用的是ng-controller 指令属性。&lt;/p&gt;
&lt;p&gt;所有$scope都遵循原型继承，这意味着它们都能访问父$scope们,对任何属性和方法，如果AngularJS在当前$scope上找不到，就会到父$scope上去找，如果在父$scope上也没找到，就会继续向上回溯，一直到$rootScope上，这个$rootScope是最顶级的$scope，它对应着含有 ng-app指令属性的那个DOM元素，也就是说根作用域关联的DOM就是ng-app指令定义的地方。&lt;br&gt; 也就是说，拥有了$scope，我们就可以操作作用域内任何我们想要获取的对象数据。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;控制器不仅声明属性也可以声明方法，如下所示：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;div ng-app=&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt; ng-controller=&lt;span class=&quot;string&quot;&gt;&quot;MyController&quot;&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     Your name:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &amp;lt;input &lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text&quot;&lt;/span&gt; ng-model=&lt;span class=&quot;string&quot;&gt;&quot;username&quot;&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &amp;lt;button ng-click=&lt;span class=&quot;string&quot;&gt;&quot;sayHello()&quot;&lt;/span&gt;&amp;gt;打招呼&amp;lt;/button&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &amp;lt;hr /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &amp;#123;&amp;#123;greeting&amp;#125;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/div&amp;gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;script&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; MyController(&lt;span class=&quot;variable&quot;&gt;$scope&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;variable&quot;&gt;$scope&lt;/span&gt;.username = &lt;span class=&quot;string&quot;&gt;&#39;World&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;variable&quot;&gt;$scope&lt;/span&gt;.sayHello = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;variable&quot;&gt;$scope&lt;/span&gt;.greeting= &lt;span class=&quot;string&quot;&gt;&#39;Hello &#39;&lt;/span&gt; + &lt;span class=&quot;variable&quot;&gt;$scope&lt;/span&gt;.username + &lt;span class=&quot;string&quot;&gt;&#39;!&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/script&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;常用指令&quot;&gt;&lt;a href=&quot;#常用指令&quot; class=&quot;headerlink&quot; title=&quot;常用指令&quot;&gt;&lt;/a&gt;常用指令&lt;/h3&gt;&lt;p&gt;ng-repeat指令，遍历一个数据集合中的每个数据元素，并且加载HTML模版把数据渲染出来，当我们要向HTML容器节点中添加更多类似DOM元素的时候，使用ng-repeat是再好不过了。&lt;br&gt;&lt;code&gt;使用方法，如下示例：&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;div ng-app=&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt; ng-init=&lt;span class=&quot;string&quot;&gt;&quot;friends = [&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;#123;name:&#39;Tom&#39;, age:25&amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;#123;name:&#39;Jerry&#39;, age:28&amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;#123;name:&#39;Tom&#39;, age:25&amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;#123;name:&#39;Jerry&#39;, age:28&amp;#125;]&quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;lt;table&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &amp;lt;tr ng-repeat=&lt;span class=&quot;string&quot;&gt;&quot;x in friends&quot;&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &amp;lt;td&amp;gt; &amp;#123;&amp;#123; &lt;span class=&quot;string&quot;&gt;&#39;Name：&#39;&lt;/span&gt;+ x.name +&lt;span class=&quot;string&quot;&gt;&#39; ，Age：&#39;&lt;/span&gt;+ x.age&amp;#125;&amp;#125; &amp;lt;/td&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &amp;lt;/tr&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;lt;/table&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;ng-repeat指令对于集合中(数组中)的每一项都会渲染一次HTML元素。&lt;/p&gt;
&lt;h3 id=&quot;过滤器&quot;&gt;&lt;a href=&quot;#过滤器&quot; class=&quot;headerlink&quot; title=&quot;过滤器&quot;&gt;&lt;/a&gt;过滤器&lt;/h3&gt;&lt;p&gt;使用AngularJS过滤器可以实现对字符串的大小写转换、货币格式的转换、数组的过滤等等。&lt;/p&gt;
&lt;h4 id=&quot;angularJS内置的过滤器&quot;&gt;&lt;a href=&quot;#angularJS内置的过滤器&quot; class=&quot;headerlink&quot; title=&quot;angularJS内置的过滤器&quot;&gt;&lt;/a&gt;angularJS内置的过滤器&lt;/h4&gt;&lt;p&gt;用法：管道字符(|)+过滤器名。&lt;br&gt;1.过滤器uppercase、lowercase对字符串转换大、小写，如下所示：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;div ng-app=&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    请输入: &amp;lt;input &lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text&quot;&lt;/span&gt; ng-model=&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    结果为： &amp;#123;&amp;#123; name | uppercase&amp;#125;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;使用方法很简单吧，在试试过滤器lowercase的效果吧！&lt;/p&gt;
&lt;h4 id=&quot;angularJS自定义的过滤器&quot;&gt;&lt;a href=&quot;#angularJS自定义的过滤器&quot; class=&quot;headerlink&quot; title=&quot;angularJS自定义的过滤器&quot;&gt;&lt;/a&gt;angularJS自定义的过滤器&lt;/h4&gt;&lt;p&gt;1.filter过滤器可以过滤数组并从中选择出一个子集出来，用法是“filter:模型名称”，示例如下：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;div ng-app=&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt; ng-init=&lt;span class=&quot;string&quot;&gt;&quot;friends = [&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;#123;name:&#39;tom&#39;, age:16&amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;#123;name:&#39;jerry&#39;, age:20&amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;#123;name:&#39;garfield&#39;, age:22&amp;#125;]&quot;&amp;gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    输入过滤:&amp;lt;input &lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text&quot;&lt;/span&gt; ng-model=&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt; &amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;ul style=&lt;span class=&quot;string&quot;&gt;&quot;list-style-type:none&quot;&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;li&amp;gt;   姓名，年龄&amp;lt;/li&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;li  ng-repeat=&lt;span class=&quot;string&quot;&gt;&quot;x in friends | filter:name&quot;&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#123;&amp;#123; x.name + &lt;span class=&quot;string&quot;&gt;&#39; , &#39;&lt;/span&gt; + x.age &amp;#125;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;/li&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;/ul&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;看到输出结果了吧，filter过滤器是不是很强大而且用法超简单就实现了对数据的简单过滤，如果不使用它，那我们想要实现这个数据过滤效果是不是要相当麻烦(可以自己试试如何实现)，而现在只需那么简单，足以彰显AngularJS是多么的给力呀！&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;友情提醒&quot;&gt;&lt;a href=&quot;#友情提醒&quot; class=&quot;headerlink&quot; title=&quot;友情提醒&quot;&gt;&lt;/a&gt;友情提醒&lt;/h2&gt;&lt;p&gt;如有疑问和错误之处，请告知&lt;a href=&quot;http://weibo.com/5979213215/profile?topnav=1&amp;amp;wvr=6&amp;amp;is_all=1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;程序员小鲁&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      这是一篇angular文章，主要是一些angularJS的功能介绍和知识点总结
    
    </summary>
    
      <category term="gulp使用" scheme="http://yoursite.com/categories/gulp%E4%BD%BF%E7%94%A8/"/>
    
      <category term="html5" scheme="http://yoursite.com/categories/gulp%E4%BD%BF%E7%94%A8/html5/"/>
    
    
      <category term="gulp" scheme="http://yoursite.com/tags/gulp/"/>
    
      <category term="代码压缩" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E5%8E%8B%E7%BC%A9/"/>
    
      <category term="文件合并" scheme="http://yoursite.com/tags/%E6%96%87%E4%BB%B6%E5%90%88%E5%B9%B6/"/>
    
  </entry>
  
  <entry>
    <title>angular基础总结(1)</title>
    <link href="http://yoursite.com/2016/05/22/angular-1%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2016/05/22/angular-1基础总结/</id>
    <published>2016-05-22T04:05:03.000Z</published>
    <updated>2016-07-25T12:12:01.453Z</updated>
    
    <content type="html">&lt;hr&gt;
&lt;h2 id=&quot;angularJS基础学习-1&quot;&gt;&lt;a href=&quot;#angularJS基础学习-1&quot; class=&quot;headerlink&quot; title=&quot;angularJS基础学习(1)&quot;&gt;&lt;/a&gt;angularJS基础学习(1)&lt;/h2&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;AngularJS 是一个为动态WEB应用设计的结构框架，提供给大家一种新的开发应用方式，这种方式可以让你扩展HTML的语法，以弥补在构建动态WEB应用时静态文本的不足，从而在web应用程序中使用HTML声明动态内容。&lt;br&gt;AngularJS有五个主要核心特性，如下介绍：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;双向数据绑定 —— 实现了把model与view完全绑定在一起，model变化，view也变化，反之亦然。&lt;/li&gt;
&lt;li&gt;模板 —— 在AngularJS中，模板相当于HTML文件被浏览器解析到DOM中，AngularJS遍历这些DOM，也就是说AuguarJS把模板当做DOM来操作，去生成一些指令来完成对view的数据绑定。&lt;/li&gt;
&lt;li&gt;MVVM —— 吸收了传统的MVC设计模式针但又并不执行传统意义上的MVC，更接近于MVVM(Moodel-View-ViewModel)。&lt;/li&gt;
&lt;li&gt;依赖注入 —— AngularJS拥有内建的依赖注入子系统，可以帮助开发人员更容易的开发，理解和测试应用。&lt;/li&gt;
&lt;li&gt;指令 —— 可以用来创建自定义的标签，也可以用来装饰元素或者操作DOM属性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;AngularJS是以一个JavaScript文件形式发布的，可通过script标签载入AngularJS脚本，如下所示&lt;/p&gt;
&lt;p&gt;复制以下代码至右边栏，做好准备工作。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;div ng-app=&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt; ng-init=&lt;span class=&quot;string&quot;&gt;&quot;name=&#39;World&#39;&quot;&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   Hello &amp;#123;&amp;#123; name &amp;#125;&amp;#125;！&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;点击运行结果查看是否为“Hello World”，如正确则表示AngularJS脚本成功引入。&lt;/p&gt;
&lt;h3 id=&quot;指令介绍&quot;&gt;&lt;a href=&quot;#指令介绍&quot; class=&quot;headerlink&quot; title=&quot;指令介绍&quot;&gt;&lt;/a&gt;指令介绍&lt;/h3&gt;&lt;p&gt;AngularJS有一套完整的、可扩展的、用来帮助web应用开发的指令集，它使得HTML可以转变成“特定领域语言(DSL)”，是用来扩展浏览器能力的技术之一，在DOM编译期间，和HTML关联着的指令会被检测到，并且被执行，这使得指令可以为DOM指定行为，或者改变它。&lt;/p&gt;
&lt;p&gt;AngularJS通过称为指令的新属性来扩展的HTML，带有前缀ng-，我们也可以称之为“指令属性”，它就是绑定在DOM元素上的函数，可以调用方法、定义行为、绑定controller及$scope对象、操作DOM，等等。&lt;/p&gt;
&lt;p&gt;Angular.js应用的动态性和响应能力，都要归功于指令属性，常见的有：ng-app、ng-init、ng-model、ng-bind、ng-repeat等等。&lt;/p&gt;
&lt;h4 id=&quot;指令：ng-app&quot;&gt;&lt;a href=&quot;#指令：ng-app&quot; class=&quot;headerlink&quot; title=&quot;指令：ng-app&quot;&gt;&lt;/a&gt;指令：ng-app&lt;/h4&gt;&lt;p&gt;ng-app指令来标明一个AngularJS应用程序，并通过AngularJS完成自动初始化应用和标记应用根作用域，同时载入和指令内容相关的模块，并通过拥有ng-app指令的标签为根节点开始编译其中的DOM。&lt;/p&gt;
&lt;p&gt;引用方法很简单，如下所示：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;div ng-app=&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如上引用，一个AngularJS应用程序初始化就完成了并标记了作用域，也就是div元素就是AngularJS应用程序的”所有者”，在它里面的指令也就会被Angular编译器所编译、解析了&lt;/p&gt;
&lt;h4 id=&quot;指令：ng-init&quot;&gt;&lt;a href=&quot;#指令：ng-init&quot; class=&quot;headerlink&quot; title=&quot;指令：ng-init&quot;&gt;&lt;/a&gt;指令：ng-init&lt;/h4&gt;&lt;p&gt;ng-init指令初始化应用程序数据，也就是为AngularJS应用程序定义初始值，通常情况下，我们会使用一个控制器或模块来代替它，后面我们会介绍有关控制器和模块的知识。&lt;/p&gt;
&lt;p&gt;如下所示，我们为应用程序变量name赋定初始值。&lt;/p&gt;
 &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;div ng-app=&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt; ng-init=&lt;span class=&quot;string&quot;&gt;&quot;name=&#39;Hello World&#39;&quot;&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 我们不仅可以赋值字符串，也可以赋值为数字、数组、对象，而且可以为多个变量赋初始值，如下所示：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;div ng-app=&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt; ng-init=&lt;span class=&quot;string&quot;&gt;&quot;quantity=1;price=5&quot;&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//或者&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;div ng-app=&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt; ng-init=&lt;span class=&quot;string&quot;&gt;&quot;names=[&#39;Tom&#39;,&#39;Jerry&#39;,&#39;Gaffey&#39;]&quot;&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;AngularJS表达式&quot;&gt;&lt;a href=&quot;#AngularJS表达式&quot; class=&quot;headerlink&quot; title=&quot;AngularJS表达式&quot;&gt;&lt;/a&gt;AngularJS表达式&lt;/h4&gt;&lt;p&gt;AngularJS框架的核心功能之一 —— 数据绑定，由两个花括号组成，可以把数据绑定到HTML，类似Javascript代码片段，可以包含文字、运算符和变量，通常在绑定数据中用到，表达式可以绑定数字、字符串、对象、数组，写在双大括号内：。&lt;br&gt;1.如前面的示例，我们就可以使用表达式这样调用初始化的变量值，如下。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1.&amp;lt;div ng-app=&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt; ng-init=&lt;span class=&quot;string&quot;&gt;&quot;name=&#39;Hello World&#39;&quot;&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2.  &amp;#123;&amp;#123; name &amp;#125;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3.&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;2.1. 输出数字，如下示例：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1.&amp;lt;div ng-app=&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt; ng-init=&lt;span class=&quot;string&quot;&gt;&quot;quantity=12;price=5&quot;&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2. &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3.总价： &amp;#123;&amp;#123; quantity * price &amp;#125;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4. &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5.&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;2.2. 输出对象，如下示例：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1.&amp;lt;div ng-app=&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt; ng-init=&lt;span class=&quot;string&quot;&gt;&quot;names=[&#39;Tom&#39;,&#39;Jerry&#39;,&#39;Gaffey&#39;]&quot;&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2. &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3.名字为： &amp;#123;&amp;#123; names[0] &amp;#125;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4. &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5.&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;后面我们还会学习另一种数据绑定的方式 —— 通过指令ng-bind来实现&lt;/p&gt;
&lt;h3 id=&quot;指令：ng-model&quot;&gt;&lt;a href=&quot;#指令：ng-model&quot; class=&quot;headerlink&quot; title=&quot;指令：ng-model&quot;&gt;&lt;/a&gt;指令：ng-model&lt;/h3&gt;&lt;p&gt;在AngularJS中，只需要使用ng-model指令就可以把应用程序数据绑定到HTML元素，实现model和view的双向绑定。&lt;/p&gt;
&lt;p&gt;如下示例，使用ng-model指令对数据进行绑定&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1.&amp;lt;div ng-app=&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2. &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3.请输入任意值：&amp;lt;input &lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text&quot;&lt;/span&gt; ng-model=&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt; /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4. &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5.你输入的为： &amp;#123;&amp;#123; name &amp;#125;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6. &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7.&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;ng-model把相关处理事件绑定到指定标签上，这样我们就可以不用在手工处理相关事件(比如change等)的条件下完成对数据的展现需求&lt;/p&gt;
&lt;h3 id=&quot;指令：ng-bind&quot;&gt;&lt;a href=&quot;#指令：ng-bind&quot; class=&quot;headerlink&quot; title=&quot;指令：ng-bind&quot;&gt;&lt;/a&gt;指令：ng-bind&lt;/h3&gt;&lt;p&gt;指令ng-bind和AngularJS的双花括号有异曲同工之妙，但不同之处就在于ng-bind是在angular解析渲染完毕后才将数据显示出来的。&lt;/p&gt;
&lt;p&gt;如下使用ng-bind指令绑定把应用程序数据。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1.&amp;lt;div ng-app=&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2.    请输入一个名字：&amp;lt;input &lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text&quot;&lt;/span&gt; ng-model=&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt; /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3.    Hello &amp;lt;span ng-bind=&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4.&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;PS：使用花括号语法时，因为浏览器需要首先加载页面，渲染它，然后AngularJS才能把它解析成你期望看到的内容，所以对于首个页面中的数据绑定操作，建议采用ng-bind，以避免其未被渲染的模板被用户看到。&lt;/p&gt;
&lt;h3 id=&quot;指令：ng-click&quot;&gt;&lt;a href=&quot;#指令：ng-click&quot; class=&quot;headerlink&quot; title=&quot;指令：ng-click&quot;&gt;&lt;/a&gt;指令：ng-click&lt;/h3&gt;&lt;p&gt;AngularJS也有自己的HTML事件指令,比如说通过ng-click定义一个AngularJS单击事件。&lt;/p&gt;
&lt;p&gt;对按钮、链接等，我们都可以用ng-click指令属性来实现绑定，如下简单示例：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1.&amp;lt;div ng-app=&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt; ng-init=&lt;span class=&quot;string&quot;&gt;&quot;click=false&quot;&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2.    &amp;lt;button ng-click=&lt;span class=&quot;string&quot;&gt;&quot;click= !click&quot;&lt;/span&gt;&amp;gt;隐藏/显示&amp;lt;/button&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3.    &amp;lt;div ng-hide=&lt;span class=&quot;string&quot;&gt;&quot;click&quot;&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4.        请输入一个名字：&amp;lt;input &lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text&quot;&lt;/span&gt; ng-model=&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt; /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5.        Hello &amp;lt;span ng-bind=&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6.    &amp;lt;/div&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7.&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;PS：ng-hide=”true”，设置HTML元素不可见。&lt;/p&gt;
&lt;h2 id=&quot;ng-click指令将DOM元素的鼠标点击事件-即mousedown-绑定到一个方法上，当浏览器在该DOM元素上鼠标触发点击事件时，Angular就会调用相应的方法，是不是很简单方便呢！&quot;&gt;&lt;a href=&quot;#ng-click指令将DOM元素的鼠标点击事件-即mousedown-绑定到一个方法上，当浏览器在该DOM元素上鼠标触发点击事件时，Angular就会调用相应的方法，是不是很简单方便呢！&quot; class=&quot;headerlink&quot; title=&quot;ng-click指令将DOM元素的鼠标点击事件(即mousedown)绑定到一个方法上，当浏览器在该DOM元素上鼠标触发点击事件时，Angular就会调用相应的方法，是不是很简单方便呢！&quot;&gt;&lt;/a&gt;ng-click指令将DOM元素的鼠标点击事件(即mousedown)绑定到一个方法上，当浏览器在该DOM元素上鼠标触发点击事件时，Angular就会调用相应的方法，是不是很简单方便呢！&lt;/h2&gt;&lt;h2 id=&quot;友情提醒&quot;&gt;&lt;a href=&quot;#友情提醒&quot; class=&quot;headerlink&quot; title=&quot;友情提醒&quot;&gt;&lt;/a&gt;友情提醒&lt;/h2&gt;&lt;p&gt;如有疑问和错误之处，请告知&lt;a href=&quot;http://weibo.com/5979213215/profile?topnav=1&amp;amp;wvr=6&amp;amp;is_all=1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;程序员小鲁&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      这是一篇angular文章，主要是一些angularJS的功能介绍和知识点总结
    
    </summary>
    
      <category term="gulp使用" scheme="http://yoursite.com/categories/gulp%E4%BD%BF%E7%94%A8/"/>
    
      <category term="html5" scheme="http://yoursite.com/categories/gulp%E4%BD%BF%E7%94%A8/html5/"/>
    
    
      <category term="gulp" scheme="http://yoursite.com/tags/gulp/"/>
    
      <category term="代码压缩" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E5%8E%8B%E7%BC%A9/"/>
    
      <category term="文件合并" scheme="http://yoursite.com/tags/%E6%96%87%E4%BB%B6%E5%90%88%E5%B9%B6/"/>
    
  </entry>
  
  <entry>
    <title>phpStorm编辑器环境配置</title>
    <link href="http://yoursite.com/2016/05/05/phpstorm%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2016/05/05/phpstorm环境配置/</id>
    <published>2016-05-05T09:25:03.000Z</published>
    <updated>2016-07-26T06:21:18.271Z</updated>
    
    <content type="html">&lt;hr&gt;
&lt;h2 id=&quot;谷歌浏览器的功能扩展&quot;&gt;&lt;a href=&quot;#谷歌浏览器的功能扩展&quot; class=&quot;headerlink&quot; title=&quot;谷歌浏览器的功能扩展&quot;&gt;&lt;/a&gt;谷歌浏览器的功能扩展&lt;/h2&gt;&lt;p&gt;配置phpStorm开发环境首先，先下载谷歌浏览器扩展插件的&lt;a href=&quot;http://chromecj.com/web-development/2015-02/365/download.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;php Console插件&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;phpStor环境配置&quot;&gt;&lt;a href=&quot;#phpStor环境配置&quot; class=&quot;headerlink&quot; title=&quot;phpStor环境配置&quot;&gt;&lt;/a&gt;phpStor环境配置&lt;/h2&gt;&lt;p&gt;&lt;code&gt;步骤如下图片所示：&lt;/code&gt;&lt;br&gt;&lt;img src=&quot;/img/phpStorm-1.png&quot; alt=&quot;图片1:&quot;&gt;&lt;br&gt;&lt;img src=&quot;/img/phpStorm-2.png&quot; alt=&quot;图片2:&quot;&gt;&lt;br&gt;&lt;img src=&quot;/img/phpStorm-3.png&quot; alt=&quot;图片3:&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;img src=&quot;/img/phpStorm-4.png&quot; alt=&quot;图片4:&quot;&gt;&lt;/h2&gt;&lt;h2 id=&quot;友情提醒&quot;&gt;&lt;a href=&quot;#友情提醒&quot; class=&quot;headerlink&quot; title=&quot;友情提醒&quot;&gt;&lt;/a&gt;友情提醒&lt;/h2&gt;&lt;p&gt;如有疑问和错误之处，请告知&lt;a href=&quot;http://weibo.com/5979213215/profile?topnav=1&amp;amp;wvr=6&amp;amp;is_all=1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;程序员小鲁&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      这是一篇phpStorm环境配置的文章，用于配置phpStorm的编辑器的环境配置。
    
    </summary>
    
      <category term="php" scheme="http://yoursite.com/categories/php/"/>
    
      <category term="html5" scheme="http://yoursite.com/categories/php/html5/"/>
    
    
      <category term="php后端" scheme="http://yoursite.com/tags/php%E5%90%8E%E7%AB%AF/"/>
    
      <category term="php环境配置" scheme="http://yoursite.com/tags/php%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>gulp-4的项目实践</title>
    <link href="http://yoursite.com/2016/04/18/gulp-4/"/>
    <id>http://yoursite.com/2016/04/18/gulp-4/</id>
    <published>2016-04-18T10:05:03.000Z</published>
    <updated>2016-07-25T09:58:37.181Z</updated>
    
    <content type="html">&lt;hr&gt;
&lt;h2 id=&quot;项目需求&quot;&gt;&lt;a href=&quot;#项目需求&quot; class=&quot;headerlink&quot; title=&quot;项目需求&quot;&gt;&lt;/a&gt;项目需求&lt;/h2&gt;&lt;p&gt;在本章内容中，我们将创建一个自己的gulp，具体的需求是通过gulp把我们自己所编写的JS文件合并压缩、CSS文件进行压缩后，并且生成新的文件。我们所需要的插件为：gulp-minify-css gulp-concat gulp-uglify gulp-rename del 如下图所示，完成后的项目目录结构：&lt;br&gt;&lt;img src=&quot;/img/图片3.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;创建项目&quot;&gt;&lt;a href=&quot;#创建项目&quot; class=&quot;headerlink&quot; title=&quot;创建项目&quot;&gt;&lt;/a&gt;创建项目&lt;/h2&gt;&lt;p&gt;在创建目录之前我们要先安装Nodejs，通过在安装好gulp（编辑环境中已经为同学们安装完毕）的环境中，点击【文件管理】展开后，就可以创建目录与文件了。&lt;br&gt;&lt;img src=&quot;/img/图片4.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;首先我们先来创建一个名为project的目录，然后进入到该目录下面，再将gulp安装到我们项目的目录中，然后在该目录下新建一个名称为gulpfile.js的文件。安装好后的目录结构为：&lt;br&gt;&lt;img src=&quot;/img/图片5.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;在该目录下再创建一个src目录，来存放源JS与CSS文件。建立完成后，再src目录分别建立两个js文件与一个CSS文件。完成后的目录结构为：&lt;br&gt;&lt;img src=&quot;/img/图片6.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;安装插件&quot;&gt;&lt;a href=&quot;#安装插件&quot; class=&quot;headerlink&quot; title=&quot;安装插件&quot;&gt;&lt;/a&gt;安装插件&lt;/h2&gt;&lt;p&gt;根据我们项目的需求，安装所需要的插件，可以通过”npm install 插件名” 来安装插件。安装完成后的目录结构如图所示。&lt;br&gt;&lt;img src=&quot;/img/图片7.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;然后打开gulpfile.js，将我们所用到的插件引用到我们项目中，代码如下:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var gulp = require(&lt;span class=&quot;string&quot;&gt;&#39;gulp&#39;&lt;/span&gt;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    minifycss = require(&lt;span class=&quot;string&quot;&gt;&#39;gulp-minify-css&#39;&lt;/span&gt;),  //CSS压缩&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    concat = require(&lt;span class=&quot;string&quot;&gt;&#39;gulp-concat&#39;&lt;/span&gt;),         // 文件合并&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    uglify = require(&lt;span class=&quot;string&quot;&gt;&#39;gulp-uglify&#39;&lt;/span&gt;),         //js压缩插件&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    rename = require(&lt;span class=&quot;string&quot;&gt;&#39;gulp-rename&#39;&lt;/span&gt;),         // 重命名&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    del = require(&lt;span class=&quot;string&quot;&gt;&#39;del&#39;&lt;/span&gt;);                    // 文件删除&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;编写代码&quot;&gt;&lt;a href=&quot;#编写代码&quot; class=&quot;headerlink&quot; title=&quot;编写代码&quot;&gt;&lt;/a&gt;编写代码&lt;/h2&gt;&lt;p&gt;上一节中已经完成了对插件的引用，下面就开始我们的代码编写，可以通过gulp.start()方法来开始执行我们的任务。&lt;/p&gt;
&lt;h3 id=&quot;1-gulp默认任务&quot;&gt;&lt;a href=&quot;#1-gulp默认任务&quot; class=&quot;headerlink&quot; title=&quot;1.gulp默认任务&quot;&gt;&lt;/a&gt;1.gulp默认任务&lt;/h3&gt;&lt;p&gt;gulp默认执行任务是 “default”当然你也可以指定别的名称，然后通过”gulp 任务名称” 来运行。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;default&#39;&lt;/span&gt;,  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    gulp.start(&lt;span class=&quot;string&quot;&gt;&#39;clean&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;minifycss&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;minifyjs&#39;&lt;/span&gt;);  // 要执行的任务&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-CSS压缩&quot;&gt;&lt;a href=&quot;#2-CSS压缩&quot; class=&quot;headerlink&quot; title=&quot;2.CSS压缩&quot;&gt;&lt;/a&gt;2.CSS压缩&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;minifycss&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; gulp.src(&lt;span class=&quot;string&quot;&gt;&#39;src/*.css&#39;&lt;/span&gt;)                  //压缩的文件&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         .pipe(minifycss())                       //执行压缩&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         .pipe(gulp.dest(&lt;span class=&quot;string&quot;&gt;&#39;minified/css&#39;&lt;/span&gt;));        //输出文件夹&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;3-JS-合并压缩&quot;&gt;&lt;a href=&quot;#3-JS-合并压缩&quot; class=&quot;headerlink&quot; title=&quot;3.JS 合并压缩&quot;&gt;&lt;/a&gt;3.JS 合并压缩&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;minifyjs&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; gulp.src(&lt;span class=&quot;string&quot;&gt;&#39;src/*.js&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        .pipe(concat(&lt;span class=&quot;string&quot;&gt;&#39;main.js&#39;&lt;/span&gt;))                  //合并所有js到main.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        .pipe(gulp.dest(&lt;span class=&quot;string&quot;&gt;&#39;minified/js&#39;&lt;/span&gt;))           //输出main.js到文件夹&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        .pipe(rename(&amp;#123;suffix: &lt;span class=&quot;string&quot;&gt;&#39;.min&#39;&lt;/span&gt;&amp;#125;))           //rename压缩后的文件名&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        .pipe(uglify())                           //压缩&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        .pipe(gulp.dest(&lt;span class=&quot;string&quot;&gt;&#39;minified/js&#39;&lt;/span&gt;));          //输出&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;4-执行压缩前，先删除目录里的内容&quot;&gt;&lt;a href=&quot;#4-执行压缩前，先删除目录里的内容&quot; class=&quot;headerlink&quot; title=&quot;4.执行压缩前，先删除目录里的内容&quot;&gt;&lt;/a&gt;4.执行压缩前，先删除目录里的内容&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;clean&#39;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(cb) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    del([&lt;span class=&quot;string&quot;&gt;&#39;minified/css&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;minified/js&#39;&lt;/span&gt;], cb)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;好了，这样我们的代码就完成了。&lt;br&gt;前面我们已经编写完成了代码，在命令行中先转到project目录下，就可以输入gulp命令来运行本项目了，刷新project目录看看会出现什么结果呢。运行完成后的目录如下图：&lt;br&gt;&lt;img src=&quot;/img/图片8.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;运行过程中的消息如下图所示:&lt;br&gt;&lt;img src=&quot;/img/图片9.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;友情提醒&quot;&gt;&lt;a href=&quot;#友情提醒&quot; class=&quot;headerlink&quot; title=&quot;友情提醒&quot;&gt;&lt;/a&gt;友情提醒&lt;/h2&gt;&lt;p&gt;如有疑问和错误之处，请告知&lt;a href=&quot;http://weibo.com/5979213215/profile?topnav=1&amp;amp;wvr=6&amp;amp;is_all=1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;程序员小鲁&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      这是一篇gulp文章，用于了解和总结应用。
    
    </summary>
    
      <category term="gulp使用" scheme="http://yoursite.com/categories/gulp%E4%BD%BF%E7%94%A8/"/>
    
      <category term="html5" scheme="http://yoursite.com/categories/gulp%E4%BD%BF%E7%94%A8/html5/"/>
    
    
      <category term="gulp" scheme="http://yoursite.com/tags/gulp/"/>
    
      <category term="代码压缩" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E5%8E%8B%E7%BC%A9/"/>
    
      <category term="文件合并" scheme="http://yoursite.com/tags/%E6%96%87%E4%BB%B6%E5%90%88%E5%B9%B6/"/>
    
  </entry>
  
  <entry>
    <title>gulp-3的插件安装</title>
    <link href="http://yoursite.com/2016/04/16/gulp-3/"/>
    <id>http://yoursite.com/2016/04/16/gulp-3/</id>
    <published>2016-04-16T08:22:15.000Z</published>
    <updated>2016-07-25T10:28:16.698Z</updated>
    
    <content type="html">&lt;hr&gt;
&lt;h2 id=&quot;自定加载&quot;&gt;&lt;a href=&quot;#自定加载&quot; class=&quot;headerlink&quot; title=&quot;自定加载&quot;&gt;&lt;/a&gt;自定加载&lt;/h2&gt;&lt;p&gt;gulp-load-plugins这个插件能自动帮你加载package.json文件里的gulp插件。例如假设你的package.json文件里的依赖是这样的:&lt;br&gt;&lt;code&gt;npm install gulp-load-plugins --save&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1.var gulp = require(&lt;span class=&quot;string&quot;&gt;&#39;gulp&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2.//加载gulp-load-plugins插件，并马上运行它&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3.var plugins = require(&lt;span class=&quot;string&quot;&gt;&#39;gulp-load-plugins&#39;&lt;/span&gt;)();&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后我们要使用gulp-rename和gulp-ruby-sass这两个插件的时候，就可以使用plugins.rename和plugins.rubySass来代替了,也就是原始插件名去掉gulp-前缀，之后再转换为驼峰命名。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;重命名&quot;&gt;&lt;a href=&quot;#重命名&quot; class=&quot;headerlink&quot; title=&quot;重命名&quot;&gt;&lt;/a&gt;重命名&lt;/h2&gt;&lt;p&gt;gulp-rename插件用来重命名文件流中的文件。用gulp.dest()方法写入文件时，文件名使用的是文件流中的文件名，如果要想改变文件名，那可以在之前用gulp-rename插件来改变文件流中的文件名。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var gulp = require(&lt;span class=&quot;string&quot;&gt;&#39;gulp&#39;&lt;/span&gt;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    rename = require(&lt;span class=&quot;string&quot;&gt;&#39;gulp-rename&#39;&lt;/span&gt;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    uglify = require(&lt;span class=&quot;string&quot;&gt;&quot;gulp-uglify&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;rename&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;/span&gt; () &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    gulp.src(&lt;span class=&quot;string&quot;&gt;&#39;src/1.js&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .pipe(uglify())           //压缩&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .pipe(rename(&lt;span class=&quot;string&quot;&gt;&#39;1.min.js&#39;&lt;/span&gt;)) //会将1.js重命名为1.min.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .pipe(gulp.dest(&lt;span class=&quot;string&quot;&gt;&#39;js&#39;&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1.在project目录中，先建立一个src目录；&lt;br&gt;2.再建立一个1.js的文件，写入一些内容；&lt;br&gt;3.然后再gulpfile.js中输入以上代码保存；&lt;br&gt;4.然后命令行转入到project目录运行，刷新project目录看看会出现什么结果呢！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;js文件压缩&quot;&gt;&lt;a href=&quot;#js文件压缩&quot; class=&quot;headerlink&quot; title=&quot;js文件压缩&quot;&gt;&lt;/a&gt;js文件压缩&lt;/h2&gt;&lt;p&gt;gulp-uglify插件用来压缩js文件。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var gulp = require(&lt;span class=&quot;string&quot;&gt;&#39;gulp&#39;&lt;/span&gt;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    uglify = require(&lt;span class=&quot;string&quot;&gt;&quot;gulp-uglify&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;minify-js&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;/span&gt; () &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    gulp.src(&lt;span class=&quot;string&quot;&gt;&#39;src/*.js&#39;&lt;/span&gt;)          // 要压缩的js文件&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .pipe(uglify())              //使用uglify进行压缩&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .pipe(gulp.dest(&lt;span class=&quot;string&quot;&gt;&#39;dist/js&#39;&lt;/span&gt;)); //压缩后的路径&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1.在project目录中，先建立一个src目录；&lt;br&gt; 2.再建立一个1.js的文件，写入一些内容；&lt;br&gt; 3.然后再gulpfile.js中输入以上代码保存；&lt;br&gt; 4.然后命令行转入到project目录运行，刷新project目录看看会出现什么结果呢！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;CSS文件压缩&quot;&gt;&lt;a href=&quot;#CSS文件压缩&quot; class=&quot;headerlink&quot; title=&quot;CSS文件压缩&quot;&gt;&lt;/a&gt;CSS文件压缩&lt;/h2&gt;&lt;p&gt;gulp-minify-css插件用来压缩css文件。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var gulp = require(&lt;span class=&quot;string&quot;&gt;&#39;gulp&#39;&lt;/span&gt;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    minifyCss = require(&lt;span class=&quot;string&quot;&gt;&quot;gulp-minify-css&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;minify-css&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;/span&gt; () &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    gulp.src(&lt;span class=&quot;string&quot;&gt;&#39;src/*.css&#39;&lt;/span&gt;) // 要压缩的css文件&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .pipe(minifyCss())    //压缩css&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .pipe(gulp.dest(&lt;span class=&quot;string&quot;&gt;&#39;dist/css&#39;&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1.在project目录中，先建立一个src目录；&lt;br&gt; 2.再建立一个1.css的文件，写入一些内容；&lt;br&gt; 3.然后再gulpfile.js中输入以上代码保存；&lt;br&gt; 4.然后命令行转入到project目录运行，刷新project目录看看会出现什么结果呢！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;html文件压缩&quot;&gt;&lt;a href=&quot;#html文件压缩&quot; class=&quot;headerlink&quot; title=&quot;html文件压缩&quot;&gt;&lt;/a&gt;html文件压缩&lt;/h2&gt;&lt;p&gt;gulp-minify-html插件用来压缩html文件。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var gulp = require(&lt;span class=&quot;string&quot;&gt;&#39;gulp&#39;&lt;/span&gt;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    minifyHtml = require(&lt;span class=&quot;string&quot;&gt;&quot;gulp-minify-html&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;minify-html&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;/span&gt; () &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    gulp.src(&lt;span class=&quot;string&quot;&gt;&#39;src/*.html&#39;&lt;/span&gt;) // 要压缩的html文件&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .pipe(minifyHtml())    //压缩&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .pipe(gulp.dest(&lt;span class=&quot;string&quot;&gt;&#39;dist/html&#39;&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1.在project目录中，先建立一个src目录；&lt;br&gt; 2.再建立一个1.html的文件，写入一些内容；&lt;br&gt; 3.然后再gulpfile.js中输入以上代码保存；&lt;br&gt; 4.然后命令行转入到project目录运行，刷新project目录看看会出现什么结果呢！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;js代码检查&quot;&gt;&lt;a href=&quot;#js代码检查&quot; class=&quot;headerlink&quot; title=&quot;js代码检查&quot;&gt;&lt;/a&gt;js代码检查&lt;/h2&gt;&lt;p&gt;使用gulp-jshint插件，用来检查js代码。安装这个插件前，需要安装gulp的jshint插件作为前提&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var gulp = require(&lt;span class=&quot;string&quot;&gt;&#39;gulp&#39;&lt;/span&gt;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    jshint = require(&lt;span class=&quot;string&quot;&gt;&quot;gulp-jshint&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;jsLint&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;/span&gt; () &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    gulp.src(&lt;span class=&quot;string&quot;&gt;&#39;src/*.js&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .pipe(jshint())&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .pipe(jshint.reporter()); // 输出检查结果&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1.在project目录中，先建立一个src目录；&lt;br&gt; 2.再建立一个1.js的文件，写入一些不合语法的内容；&lt;br&gt; 3.然后再gulpfile.js中输入以上代码保存；&lt;br&gt; 4.然后命令行转入到project目录运行，看看会出现什么结果呢！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;文件合并&quot;&gt;&lt;a href=&quot;#文件合并&quot; class=&quot;headerlink&quot; title=&quot;文件合并&quot;&gt;&lt;/a&gt;文件合并&lt;/h2&gt;&lt;p&gt;使用gulp-concat插件，用来把多个文件合并为一个文件,我们可以用它来合并js或css文件等。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var gulp = require(&lt;span class=&quot;string&quot;&gt;&#39;gulp&#39;&lt;/span&gt;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    concat = require(&lt;span class=&quot;string&quot;&gt;&quot;gulp-concat&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;concat&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;/span&gt; () &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    gulp.src(&lt;span class=&quot;string&quot;&gt;&#39;src/*.js&#39;&lt;/span&gt;)     //要合并的文件&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .pipe(concat(&lt;span class=&quot;string&quot;&gt;&#39;all.js&#39;&lt;/span&gt;))  // 合并匹配到的js文件并命名为 &lt;span class=&quot;string&quot;&gt;&quot;all.js&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .pipe(gulp.dest(&lt;span class=&quot;string&quot;&gt;&#39;dist/js&#39;&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1.在project目录中，先建立一个src目录；&lt;br&gt; 2.再分别建立两个文件1.js与2.js，写入一些内容；&lt;br&gt; 3.然后再gulpfile.js中输入以上代码保存；&lt;br&gt; 4.然后命令行转入到project目录运行，刷新project目录看看会出现什么结果呢！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;图片压缩&quot;&gt;&lt;a href=&quot;#图片压缩&quot; class=&quot;headerlink&quot; title=&quot; 图片压缩&quot;&gt;&lt;/a&gt; 图片压缩&lt;/h2&gt;&lt;p&gt; 可以使用gulp-imagemin插件来压缩jpg、png、gif等图片。&lt;br&gt; &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var gulp = require(&lt;span class=&quot;string&quot;&gt;&#39;gulp&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var imagemin = require(&lt;span class=&quot;string&quot;&gt;&#39;gulp-imagemin&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var pngquant = require(&lt;span class=&quot;string&quot;&gt;&#39;imagemin-pngquant&#39;&lt;/span&gt;); //png图片压缩插件&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;default&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;/span&gt; () &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; gulp.src(&lt;span class=&quot;string&quot;&gt;&#39;src/images/*&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        .pipe(imagemin(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            progressive: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            use: [pngquant()] //使用pngquant来压缩png图片&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        .pipe(gulp.dest(&lt;span class=&quot;string&quot;&gt;&#39;dist&#39;&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;自动刷新&quot;&gt;&lt;a href=&quot;#自动刷新&quot; class=&quot;headerlink&quot; title=&quot; 自动刷新&quot;&gt;&lt;/a&gt; 自动刷新&lt;/h2&gt;&lt;p&gt; 使用gulp-livereload插件，当代码变化时，它可以帮我们自动刷新页面。&lt;br&gt; &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var gulp = require(&lt;span class=&quot;string&quot;&gt;&#39;gulp&#39;&lt;/span&gt;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    less = require(&lt;span class=&quot;string&quot;&gt;&#39;gulp-less&#39;&lt;/span&gt;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    livereload = require(&lt;span class=&quot;string&quot;&gt;&#39;gulp-livereload&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;less&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  gulp.src(&lt;span class=&quot;string&quot;&gt;&#39;less/*.less&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .pipe(less())&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .pipe(gulp.dest(&lt;span class=&quot;string&quot;&gt;&#39;css&#39;&lt;/span&gt;))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .pipe(livereload());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;watch&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  livereload.listen(); //要在这里调用listen()方法&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  gulp.watch(&lt;span class=&quot;string&quot;&gt;&#39;less/*.less&#39;&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;&#39;less&#39;&lt;/span&gt;]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;友情提醒&quot;&gt;&lt;a href=&quot;#友情提醒&quot; class=&quot;headerlink&quot; title=&quot;友情提醒&quot;&gt;&lt;/a&gt;友情提醒&lt;/h2&gt;&lt;p&gt;如有疑问和错误之处，请告知&lt;a href=&quot;http://weibo.com/5979213215/profile?topnav=1&amp;amp;wvr=6&amp;amp;is_all=1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;程序员小鲁&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      这是一篇gulp文章，用于了解和总结应用。
    
    </summary>
    
      <category term="gulp使用" scheme="http://yoursite.com/categories/gulp%E4%BD%BF%E7%94%A8/"/>
    
      <category term="html5" scheme="http://yoursite.com/categories/gulp%E4%BD%BF%E7%94%A8/html5/"/>
    
    
      <category term="gulp" scheme="http://yoursite.com/tags/gulp/"/>
    
      <category term="代码压缩" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E5%8E%8B%E7%BC%A9/"/>
    
      <category term="文件合并" scheme="http://yoursite.com/tags/%E6%96%87%E4%BB%B6%E5%90%88%E5%B9%B6/"/>
    
  </entry>
  
  <entry>
    <title>gulp-2的工作方式</title>
    <link href="http://yoursite.com/2016/04/16/gulp-2/"/>
    <id>http://yoursite.com/2016/04/16/gulp-2/</id>
    <published>2016-04-16T03:13:03.000Z</published>
    <updated>2016-07-25T09:58:37.161Z</updated>
    
    <content type="html">&lt;h2 id=&quot;工作方式&quot;&gt;&lt;a href=&quot;#工作方式&quot; class=&quot;headerlink&quot; title=&quot;工作方式&quot;&gt;&lt;/a&gt;工作方式&lt;/h2&gt;&lt;h3 id=&quot;简单介绍&quot;&gt;&lt;a href=&quot;#简单介绍&quot; class=&quot;headerlink&quot; title=&quot;简单介绍&quot;&gt;&lt;/a&gt;简单介绍&lt;/h3&gt;&lt;p&gt;在介绍gulp API之前，我们首先来说一下gulp.js工作方式。在gulp中，使用的是Nodejs中的stream(流)，首先获取到需要的stream，然后可以通过stream的pipe()方法把流导入到你想要的地方，比如gulp的插件中，经过插件处理后的流又可以继续导入到其他插件中，当然也可以把流写入到文件中。所以gulp是以stream为媒介的，它不需要频繁的生成临时文件，这也是我们应用gulp的一个原因。&lt;/p&gt;
&lt;p&gt;gulp的使用流程一般是：首先通过gulp.src()方法获取到想要处理的文件流，然后把文件流通过pipe方法导入到gulp的插件中，最后把经过插件处理后的流再通过pipe方法导入到gulp.dest()中，gulp.dest()方法则把流中的内容写入到文件中。例如：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var gulp = require(&lt;span class=&quot;string&quot;&gt;&#39;gulp&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.src(&lt;span class=&quot;string&quot;&gt;&#39;script/jquery.js&#39;&lt;/span&gt;)         // 获取流的api&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .pipe(gulp.dest(&lt;span class=&quot;string&quot;&gt;&#39;dist/foo.js&#39;&lt;/span&gt;)); // 写放文件的api&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们将在本章内容中来给同学们讲解gulp API，其中包括gulp.src()，gulp.task()，gulp.dest()，gulp.watch()，gulp.run()。&lt;/p&gt;
&lt;h3 id=&quot;gulp的匹配原则&quot;&gt;&lt;a href=&quot;#gulp的匹配原则&quot; class=&quot;headerlink&quot; title=&quot;gulp的匹配原则&quot;&gt;&lt;/a&gt;gulp的匹配原则&lt;/h3&gt;&lt;p&gt;gulp内部使用了node-glob模块来实现其文件匹配功能。我们可以使用下面这些特殊的字符来匹配我们想要的文件：&lt;/p&gt;
&lt;p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;匹配符&lt;/th&gt;&lt;th&gt;说明&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th&gt;&lt;em&gt;&lt;/em&gt;&lt;/th&gt;&lt;th&gt;匹配文件路径中的0个或多个字符，但不会匹配路径分隔符，除非路径分隔符出现在末尾&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;**&lt;/th&gt;&lt;th&gt;匹配路径中的0个或多个目录及其子目录,需要单独出现，即它左右不能有其他东西了。如果出现在末尾，也能匹配文件。&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;?&lt;/th&gt;&lt;th&gt;匹配文件路径中的一个字符(不会匹配路径分隔符)&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;[…]&lt;/th&gt;&lt;th&gt;匹配方括号中出现的字符中的任意一个，当方括号中第一个字符为^或!时，则表示不匹配方括号中出现的其他字符中的任意一个，类似js正则表达式中的用法&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;!(pattern|pattern|pattern)&lt;/th&gt;&lt;th&gt;匹配任何与括号中给定的任一模式都不匹配的&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;?(pattern|pattern|pattern)&lt;/th&gt;&lt;th&gt;匹配括号中给定的任一模式0次或1次，类似于js正则中的(pattern|pattern|pattern)?&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;+(pattern|pattern|pattern)&lt;/th&gt;&lt;th&gt;匹配括号中给定的任一模式至少1次，类似于js正则中的(pattern|pattern|pattern)+&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;(pattern|pattern|pattern)&lt;/th&gt;&lt;th&gt;匹配括号中给定的任一模式0次或多次，类似于js正则中的(pattern|pattern|pattern)*&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;@(pattern|pattern|pattern)&lt;/th&gt;&lt;th&gt;匹配括号中给定的任一模式1次，类似于js正则中的(pattern|pattern|pattern)&lt;/th&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/p&gt;
&lt;h3 id=&quot;src路径&quot;&gt;&lt;a href=&quot;#src路径&quot; class=&quot;headerlink&quot; title=&quot;src路径&quot;&gt;&lt;/a&gt;src路径&lt;/h3&gt;&lt;p&gt;gulp.src()方法正是用来获取流的，但要注意这个流里的内容不是原始的文件流，而是一个虚拟文件对象流(Vinyl files)，这个虚拟文件对象中存储着原始文件的路径、文件名、内容等信息。其语法为：&lt;br&gt;&lt;code&gt;1.gulp.src(globs[, options]);&lt;/code&gt;&lt;br&gt;globs参数是文件匹配模式(类似正则表达式)，用来匹配文件路径(包括文件名)，当然这里也可以直接指定某个具体的文件路径。当有多个匹配模式时，该参数可以为一个数组;类型为String或 Array。我们在前一节中已经讲过了globs的匹配规则，这里就不在详述。&lt;br&gt;当有多种匹配模式时可以使用数组&lt;br&gt;&lt;code&gt;1.gulp.src([&amp;#39;js/*.js&amp;#39;,&amp;#39;css/*.css&amp;#39;,&amp;#39;*.html&amp;#39;])   //使用数组的方式来匹配多种文件&lt;/code&gt;&lt;br&gt;options为可选参数。以下为options的选项参数:&lt;/p&gt;
&lt;h4 id=&quot;options-buffer&quot;&gt;&lt;a href=&quot;#options-buffer&quot; class=&quot;headerlink&quot; title=&quot;options.buffer&quot;&gt;&lt;/a&gt;options.buffer&lt;/h4&gt;&lt;p&gt;类型： Boolean 默认值： true&lt;br&gt;　　如果该项被设置为 false，那么将会以 stream 方式返回 file.contents 而不是文件 buffer 的形式。这在处理一些大文件的时候将会很有用。注意：插件可能并不会实现对 stream 的支持。&lt;/p&gt;
&lt;h4 id=&quot;options-read&quot;&gt;&lt;a href=&quot;#options-read&quot; class=&quot;headerlink&quot; title=&quot;options.read&quot;&gt;&lt;/a&gt;options.read&lt;/h4&gt;&lt;p&gt;类型： Boolean 默认值： true&lt;br&gt;    如果该项被设置为 false， 那么 file.contents 会返回空值（null），也就是并不会去读取文件。&lt;/p&gt;
&lt;h4 id=&quot;options-base&quot;&gt;&lt;a href=&quot;#options-base&quot; class=&quot;headerlink&quot; title=&quot;options.base&quot;&gt;&lt;/a&gt;options.base&lt;/h4&gt;&lt;p&gt;类型： String ， 设置输出路径以某个路径的某个组成部分为基础向后拼接。&lt;br&gt;如, 请想像一下在一个路径为 client/js/somedir 的目录中，有一个文件叫 somefile.js ：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;gulp.src(&lt;span class=&quot;string&quot;&gt;&#39;client/js/**/*.js&#39;&lt;/span&gt;) // 匹配 &lt;span class=&quot;string&quot;&gt;&#39;client/js/somedir/somefile.js&#39;&lt;/span&gt; 现在 `base` 的值为 `client/js/`&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  .pipe(minify())&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  .pipe(gulp.dest(&lt;span class=&quot;string&quot;&gt;&#39;build&#39;&lt;/span&gt;));  // 写入 &lt;span class=&quot;string&quot;&gt;&#39;build/somedir/somefile.js&#39;&lt;/span&gt; 将`client/js/`替换为build&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.src(&lt;span class=&quot;string&quot;&gt;&#39;client/js/**/*.js&#39;&lt;/span&gt;, &amp;#123; base: &lt;span class=&quot;string&quot;&gt;&#39;client&#39;&lt;/span&gt; &amp;#125;) // base 的值为 &lt;span class=&quot;string&quot;&gt;&#39;client&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  .pipe(minify())&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  .pipe(gulp.dest(&lt;span class=&quot;string&quot;&gt;&#39;build&#39;&lt;/span&gt;));  // 写入 &lt;span class=&quot;string&quot;&gt;&#39;build/js/somedir/somefile.js&#39;&lt;/span&gt; 将`client`替换为build&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;dest-方法写文件&quot;&gt;&lt;a href=&quot;#dest-方法写文件&quot; class=&quot;headerlink&quot; title=&quot;dest()方法写文件&quot;&gt;&lt;/a&gt;dest()方法写文件&lt;/h3&gt;&lt;p&gt;gulp.dest()方法是用来写文件的，其语法为：&lt;br&gt;&lt;code&gt;1.gulp.dest(path[,options])&lt;/code&gt;&lt;br&gt;path为写入文件的路径；&lt;br&gt;options为一个可选的参数对象，以下为选项参数：&lt;/p&gt;
&lt;h4 id=&quot;options-cwd&quot;&gt;&lt;a href=&quot;#options-cwd&quot; class=&quot;headerlink&quot; title=&quot;options.cwd&quot;&gt;&lt;/a&gt;options.cwd&lt;/h4&gt;&lt;p&gt; 类型： String 默认值： process.cwd()&lt;br&gt; 输出目录的 cwd 参数，只在所给的输出目录是相对路径时候有效。&lt;/p&gt;
&lt;h4 id=&quot;options-mode&quot;&gt;&lt;a href=&quot;#options-mode&quot; class=&quot;headerlink&quot; title=&quot;options.mode&quot;&gt;&lt;/a&gt;options.mode&lt;/h4&gt;&lt;p&gt; 类型： String 默认值： 0777&lt;br&gt; 八进制权限字符，用以定义所有在输出目录中所创建的目录的权限。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var gulp = require(&lt;span class=&quot;string&quot;&gt;&#39;gulp&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.src(&lt;span class=&quot;string&quot;&gt;&#39;script/jquery.js&#39;&lt;/span&gt;)　       // 获取流&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .pipe(gulp.dest(&lt;span class=&quot;string&quot;&gt;&#39;dist/foo.js&#39;&lt;/span&gt;)); // 写放文件&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;watch-方法监视文件的变化&quot;&gt;&lt;a href=&quot;#watch-方法监视文件的变化&quot; class=&quot;headerlink&quot; title=&quot;watch()方法监视文件的变化&quot;&gt;&lt;/a&gt;watch()方法监视文件的变化&lt;/h3&gt;&lt;p&gt;gulp.watch()用来监视文件的变化，当文件发生变化后，我们可以利用它来执行相应的任务，例如文件压缩等。其语法为&lt;br&gt;&lt;code&gt;1.gulp.watch(glob[, opts], tasks);&lt;/code&gt;&lt;br&gt;glob 为要监视的文件匹配模式，规则和用法与gulp.src()方法中的glob相同。 opts 为一个可选的配置对象，通常不需要用到。 tasks 为文件变化后要执行的任务，为一个数组。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;uglify&#39;&lt;/span&gt;,&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;/span&gt;()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  //&lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; something&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;reload&#39;&lt;/span&gt;,&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;/span&gt;()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  //&lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; something&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.watch(&lt;span class=&quot;string&quot;&gt;&#39;js/**/*.js&#39;&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;&#39;uglify&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;reload&#39;&lt;/span&gt;]);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;task-方法定义任务&quot;&gt;&lt;a href=&quot;#task-方法定义任务&quot; class=&quot;headerlink&quot; title=&quot;task()方法定义任务&quot;&gt;&lt;/a&gt;task()方法定义任务&lt;/h3&gt;&lt;p&gt;gulp.task方法用来定义任务，内部使用的是Orchestrator(用于排序、执行任务和最大并发依赖关系的模块)，其语法为&lt;br&gt;&lt;code&gt;1.gulp.task(name[, deps], fn)   //name 为任务名;&lt;/code&gt;&lt;br&gt;deps 是当前定义的任务需要依赖的其他任务，为一个数组。当前定义的任务会在所有依赖的任务执行完毕后才开始执行。如果没有依赖，则可省略这个参数；&lt;br&gt;fn 为任务函数，我们把任务要执行的代码都写在里面。该参数也是可选的。&lt;br&gt;当你定义一个简单的任务时，需要传入任务名字和执行函数两个属性。&lt;/p&gt;
&lt;h3 id=&quot;run-方法执行任务&quot;&gt;&lt;a href=&quot;#run-方法执行任务&quot; class=&quot;headerlink&quot; title=&quot;run()方法执行任务&quot;&gt;&lt;/a&gt;run()方法执行任务&lt;/h3&gt;&lt;p&gt;gulp.run()表示要执行的任务。可能会使用单个参数的形式传递多个任务。如下代码：&lt;br&gt;`1.gulp.task(‘end’,function(){&lt;br&gt; 2.gulp.run(‘task1’,’task3’,’task2’);&lt;/p&gt;
&lt;h2 id=&quot;3&quot;&gt;&lt;a href=&quot;#3&quot; class=&quot;headerlink&quot; title=&quot; 3.});`&quot;&gt;&lt;/a&gt; 3.});`&lt;/h2&gt;&lt;h2 id=&quot;友情提醒&quot;&gt;&lt;a href=&quot;#友情提醒&quot; class=&quot;headerlink&quot; title=&quot;友情提醒&quot;&gt;&lt;/a&gt;友情提醒&lt;/h2&gt;&lt;p&gt;如有疑问和错误之处，请告知&lt;a href=&quot;http://weibo.com/5979213215/profile?topnav=1&amp;amp;wvr=6&amp;amp;is_all=1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;程序员小鲁&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      这是一篇gulp文章，用于了解和总结应用。
    
    </summary>
    
      <category term="gulp使用" scheme="http://yoursite.com/categories/gulp%E4%BD%BF%E7%94%A8/"/>
    
      <category term="html5" scheme="http://yoursite.com/categories/gulp%E4%BD%BF%E7%94%A8/html5/"/>
    
    
      <category term="gulp" scheme="http://yoursite.com/tags/gulp/"/>
    
      <category term="代码压缩" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E5%8E%8B%E7%BC%A9/"/>
    
      <category term="文件合并" scheme="http://yoursite.com/tags/%E6%96%87%E4%BB%B6%E5%90%88%E5%B9%B6/"/>
    
  </entry>
  
  <entry>
    <title>gulp-1的使用</title>
    <link href="http://yoursite.com/2016/04/15/gulp-1/"/>
    <id>http://yoursite.com/2016/04/15/gulp-1/</id>
    <published>2016-04-15T13:52:03.000Z</published>
    <updated>2016-07-25T09:58:37.172Z</updated>
    
    <content type="html">&lt;h2 id=&quot;gulp的详细介绍&quot;&gt;&lt;a href=&quot;#gulp的详细介绍&quot; class=&quot;headerlink&quot; title=&quot;gulp的详细介绍&quot;&gt;&lt;/a&gt;gulp的详细介绍&lt;/h2&gt;&lt;h3 id=&quot;What-is-gulp&quot;&gt;&lt;a href=&quot;#What-is-gulp&quot; class=&quot;headerlink&quot; title=&quot;What is gulp?&quot;&gt;&lt;/a&gt;What is gulp?&lt;/h3&gt;&lt;p&gt;gulp是前端开发过程中一种基于流的代码构建工具，是自动化项目的构建利器；她不仅能对网站资源进行优化，而且在开发过程中很多重复的任务能够使用正确的工具自动完成；使用她，不仅可以很愉快的编写代码，而且大大提高我们的工作效率。&lt;/p&gt;
&lt;p&gt;gulp是基于Nodejs的自动任务运行器， 她能自动化地完成 javascript、coffee、sass、less、html/image、css 等文件的测试、检查、合并、压缩、格式化、浏览器自动刷新、部署文件生成，并监听文件在改动后重复指定的这些步骤。在实现上，她借鉴了Unix操作系统的管道（pipe）思想，前一级的输出，直接变成后一级的输入，使得在操作上非常简单。&lt;br&gt;&lt;img src=&quot;/img/图片1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;流-stream&quot;&gt;&lt;a href=&quot;#流-stream&quot; class=&quot;headerlink&quot; title=&quot;流(stream)&quot;&gt;&lt;/a&gt;流(stream)&lt;/h3&gt;&lt;p&gt;简单来说就是建立在面向对象基础上的一种抽象的处理数据的工具。在流中，定义了一些处理数据的基本操作，如读取数据，写入数据等，程序员是对流进行所有操作的，而不用关心流的另一头数据的真正流向。流不但可以处理文件，还可以处理动态内存、网络数据等多种数据形式。&lt;/p&gt;
&lt;p&gt;而gulp正是通过流和代码优于配置的策略来尽量简化任务编写的工作。这看起来有点“像jQuery”的方法，把动作串起来创建构建任务。早在Unix的初期，流就已经存在了。流在Node.js生态系统中也扮演了重要的角色，类似于*nix将几乎所有设备抽象为文件一样，Node将几乎所有IO操作都抽象成了stream的操作。因此用gulp编写任务也可看作是用Node.js编写任务。当使用流时，gulp去除了中间文件，只将最后的输出写入磁盘，整个过程因此变得更快。&lt;/p&gt;
&lt;h3 id=&quot;特点&quot;&gt;&lt;a href=&quot;#特点&quot; class=&quot;headerlink&quot; title=&quot;特点&quot;&gt;&lt;/a&gt;特点&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;易于使用&lt;/code&gt;:通过代码优于配置的策略，gulp 让简单的任务简单，复杂的任务可管理。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;构建快速&lt;/code&gt;:利用 Node.js 流的威力，你可以快速构建项目并减少频繁的 IO 操作。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;易于学习&lt;/code&gt;:通过最少的 API，掌握 gulp 毫不费力，构建工作尽在掌握：如同一系列流管道。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;插件高质&lt;/code&gt;:gulp 严格的插件指南确保插件如你期望的那样简洁高质得工作。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;gulp的使用&quot;&gt;&lt;a href=&quot;#gulp的使用&quot; class=&quot;headerlink&quot; title=&quot;gulp的使用&quot;&gt;&lt;/a&gt;gulp的使用&lt;/h2&gt;&lt;h3 id=&quot;gulp的安装&quot;&gt;&lt;a href=&quot;#gulp的安装&quot; class=&quot;headerlink&quot; title=&quot;gulp的安装&quot;&gt;&lt;/a&gt;gulp的安装&lt;/h3&gt;&lt;p&gt;首先确保你已经正确安装了nodejs环境。然后以全局方式安装gulp：&lt;br&gt;&lt;code&gt;1.npm install -g gulp&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;全局安装gulp后，还需要在每个要使用gulp的项目中都单独安装一次。把目录切换到你的项目文件夹中，然后在命令行中执行：&lt;br&gt;&lt;code&gt;2.npm install gulp&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果想在安装的时候把gulp写进项目package.json文件的依赖中，则可以加上–save-dev：&lt;br&gt;&lt;code&gt;2.npm install --save-dev gulp&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;通过上面的两个步骤，就完成了gulp的安装，接下来就可以在项目中应用gulp了&lt;/p&gt;
&lt;h3 id=&quot;gulp的使用-1&quot;&gt;&lt;a href=&quot;#gulp的使用-1&quot; class=&quot;headerlink&quot; title=&quot;gulp的使用&quot;&gt;&lt;/a&gt;gulp的使用&lt;/h3&gt;&lt;p&gt;1.建立gulpfile.js文件&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;gulp也需要一个文件作为它的主文件，在gulp中这个文件叫做gulpfile.js。新建一个文件名为gulpfile.js的文件，然后放到你的项目目录中。之后要做的事情就是在gulpfile.js文件中定义我们的任务了。下面是一个最简单的gulpfile.js文件内容示例，它定义了一个默认的任务。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var gulp = require(&lt;span class=&quot;string&quot;&gt;&#39;gulp&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;default&#39;&lt;/span&gt;,&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;/span&gt;()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    console.log(&lt;span class=&quot;string&quot;&gt;&#39;hello world&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;此时我们的目录结构是这样子的：&lt;img src=&quot;/img/图片2.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;2.运行gulp任务&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;要运行gulp任务，只需切换到存放gulpfile.js文件的目录(windows平台请使用cmd或者Power Shell等工具)，然后在命令行中执行gulp命令就行了，gulp后面可以加上要执行的任务名，例如gulp task1，如果没有指定任务名，则会执行任务名为default的默认任务。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;友情提醒&quot;&gt;&lt;a href=&quot;#友情提醒&quot; class=&quot;headerlink&quot; title=&quot;友情提醒&quot;&gt;&lt;/a&gt;友情提醒&lt;/h2&gt;&lt;p&gt;如有疑问和错误之处，请告知&lt;a href=&quot;http://weibo.com/5979213215/profile?topnav=1&amp;amp;wvr=6&amp;amp;is_all=1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;程序员小鲁&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      这是一篇gulp文章，用于了解和总结应用。
    
    </summary>
    
      <category term="gulp使用" scheme="http://yoursite.com/categories/gulp%E4%BD%BF%E7%94%A8/"/>
    
      <category term="html5" scheme="http://yoursite.com/categories/gulp%E4%BD%BF%E7%94%A8/html5/"/>
    
    
      <category term="gulp" scheme="http://yoursite.com/tags/gulp/"/>
    
      <category term="代码压缩" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E5%8E%8B%E7%BC%A9/"/>
    
      <category term="文件合并" scheme="http://yoursite.com/tags/%E6%96%87%E4%BB%B6%E5%90%88%E5%B9%B6/"/>
    
  </entry>
  
</feed>
